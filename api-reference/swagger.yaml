openapi: 3.0.2
info:
  title: Finsei API
  description: description: Finsei API documentation
  version: 2.0.0

tags:
  - name: auth
  - name: owner
  - name: user
  - name: company
  - name: info
  - name: country
  - name: wish list
  - name: payment
  - name: currency exchange
  - name: crypto payment
  - name: crypto address
  - name: wallet
  - name: beneficiary
  - name: mfa
  - name: notification
  - name: member
  - name: registration
  - name: sap
  - name: card
  - name: features
  - name: code
  - name: ws
  - name: ticket
  - name: webhook

paths:
  /v2/auth:
    get:
      summary: Get active user tokens
      tags: [ auth ]
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Before'
        - $ref: '#/components/parameters/After'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthV2'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/ValidationError'

    post:
      tags: [ auth ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
        - in: query
          name: signToken
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthV2'
      responses:
        200:
          $ref: '#/components/responses/Validate'
        201:
          $ref: '#/components/responses/Created'
        202:
          $ref: '#/components/responses/Sign'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ auth ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v2/auth/{id}:
    get:
      summary: Get active user token
      tags: [ auth ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthV2'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ auth ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/auth:
    get:
      summary: Get active user tokens
      deprecated: true
      tags: [ auth ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    fingerprint_id:
                      type: string
                      nullable: true
                      maxLength: 64
                    created_at:
                      type: integer
                    expired_at:
                      type: integer
                      nullable: true
                    app_version:
                      type: string
                      deprecated: true # API-4035
                    os_version:
                      type: string
                      deprecated: true # API-4035
                    app:
                      type: string
                      nullable: true
                    os:
                      type: string
                      nullable: true
                    osIcon:
                      type: string
                      nullable: true
                      enum:
                        - IOS
                        - MACOS
                        - ANDROID
                        - LINUX
                        - WINDOWS
                    device:
                      type: string
                      nullable: true
                    ip:
                      type: string
                    location:
                      type: object
                      properties:
                        country:
                          type: string
                        city:
                          type: string
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ auth ]
      deprecated: true
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/auth/{id}:
    delete:
      summary: Delete token
      tags: [ auth ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: OK
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ auth ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: DELETE, OPTIONS

  /v2/auth/token:
    post:
      tags: [ auth ]
      security:
        - BasicAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: SUCCESS
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: string
                          wsToken:
                            type: string
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ auth ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/auth/token/refresh:
    post:
      tags: [ auth ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthRefresh'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRefresh'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                      wsToken:
                        type: string
        400:
          $ref: '#/components/responses/BadRequest'
        429:
          $ref: '#/components/responses/TooManyRequests'

    options:
      tags: [ auth ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/auth/refresh:
    post:
      tags: [ auth ]
      deprecated: true #API-9343
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthRefresh'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRefresh'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                      wsToken:
                        type: string
        400:
          $ref: '#/components/responses/BadRequest'
        429:
          $ref: '#/components/responses/TooManyRequests'

    options:
      tags: [ auth ]
      deprecated: true #API-9343
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/auth/password/reset/{token}:
    put:
      summary: Reset password action
      tags: [ auth ]
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthUpdatePassword'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUpdatePassword'
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [ ]

    options:
      tags: [ auth ]
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: PUT, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: PUT, OPTIONS

  /v1/auth/password/reset:
    post:
      summary: Request reset password action
      tags: [ auth ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthResetPassword'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthResetPassword'
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [ ]

    options:
      tags: [ auth ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/auth/password/change:
    post:
      summary: Change password action
      tags: [ auth ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthChangePasswordV2'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthChangePasswordV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ auth ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v3/payment:
    post:
      summary: Create new payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
        - in: query
          name: signToken
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreateV3'
      responses:
        200:
          $ref: '#/components/responses/Validate'
        201:
          $ref: '#/components/responses/Created'
        202:
          $ref: '#/components/responses/Sign'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v3/payment/list/purpose-code:
    get:
      summary: Get payment reason list
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: search
          explode: false
          schema:
            type: string
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              example: [
                {
                  "countryId": "AE",
                  "id": "ACM",
                  "label": "Agency Commissions"
                },
                {
                  "countryId": "AE",
                  "id": "AES",
                  "label": "Advance payment against EOS"
                }
              ]
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique id
                    label:
                      type: string
                      description: Description
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v3/payment/sign:
    post:
      summary: Execute DRAFT payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
        - in: query
          name: signToken
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  description: Payment uuid (UUID string)
                  items:
                    type: string
              required:
                - id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/payment:
    get:
      summary: Display list of payments
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentExpand'
        - in: query
          name: type
          schema:
            type: string
            enum:
              - debit
              - credit
        - in: query
          name: counterpartyName
          description: Counterparty name
          schema:
            type: string
        - in: query
          name: counterpartyIban
          description: Counterparty iban
          schema:
            type: string
        - in: query
          name: walletId
          description: Wallet unique id
          schema:
            type: integer
        - in: query
          name: status[]
          schema:
            type: array
            items:
              type: string
              enum:
                - new
                - process
                - completed
                - rejected
                - canceled
                - draft
                - compliance
        - in: query
          name: createdFrom
          description: Date from in unix or millisecond unix time format
          schema:
            type: integer
        - in: query
          name: createdTo
          description: Date to in unix or millisecond unix time format
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
            enum:
              - WALLET
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentV2'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      deprecated: true
      summary: Create new payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreateV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    delete:
      summary: Delete payment (only DRAFT)
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  description: Payment id (integer) or payment uuid (UUID string)
                  items:
                    type: string
              required:
                - id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, DELETE, OPTIONS

  /v1/payment:
    get:
      deprecated: true # TODO API-5213
      summary: Display list of payments
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentExpand'
        - in: query
          name: type
          schema:
            type: string
            enum:
              - debit
              - credit
        - in: query
          name: wallet_id
          description: Wallet unique id
          schema:
            type: integer
        - in: query
          name: status[]
          schema:
            type: array
            items:
              type: string
              enum:
                - new
                - process
                - completed
                - rejected
                - canceled
                - draft
                - compliance
        - in: query
          name: date_from
          description: Date from in unixtime format
          schema:
            type: integer
        - in: query
          name: date_to
          description: Date to in unixtime format
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
            enum:
              - WALLET
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentV1'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      deprecated: true # TODO API-5213
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/payment/{id}:
    get:
      summary: Details information about payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: 'Either payment id (integer) or payment uuid (UUID string)'
          schema:
            type: string
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentExpand'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentV2'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ payment ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'Either payment id (integer) or payment uuid (UUID string)'
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/payment/{id}/clone:
    post:
      summary: Clone debit payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: Payment UUID or ID
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 00000000-0000-0000-0000-000000000000
                  description: New payment UUID Unique id
                  default: null
                  nullable: true
      responses:
        200:
          $ref: '#/components/responses/Validate'
        201:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ payment ]
      parameters:
        - in: path
          name: id
          required: true
          description: Payment UUID or ID
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/payment/{id}:
    get:
      deprecated: true # TODO API-5213
      summary: Details information about payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentExpand'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentV1'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      deprecated: true # TODO API-5213
      tags: [ payment ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Payment ID
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/payment/{id}/cancel:
    post:
      summary: Cancel payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ payment ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/payment/{id}/download/confirmation:
    get:
      summary: Get payment confirmation file
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Payment ID
      responses:
        200:
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    options:
      tags: [ payment ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS
    head:
      tags: [ payment ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
        404:
          $ref: '#/components/responses/NotFound'

  /v1/payment/{id}/download/{file_name}:
    get:
      summary: Get payment attached file
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Payment ID
        - in: path
          name: file_name
          required: true
          schema:
            type: string
          description: File name
      responses:
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ payment ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Payment ID
        - in: path
          name: file_name
          required: true
          schema:
            type: string
          description: File name
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS
    head:
      tags: [ payment ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Payment ID
        - in: path
          name: file_name
          required: true
          schema:
            type: string
          description: File name
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
        404:
          $ref: '#/components/responses/NotFound'

  /v2/payment/calculate/fee:
    post:
      summary: Response fee for payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentRequestCalculateFee'
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestCalculateFee'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: SUCCESS
                      data:
                        type: object
                        properties:
                          fee:
                            type: number
                            description: Fee for payment
                          total:
                            type: number
                            description: Fee + amount for payment
                          currencyId:
                            type: string
                            description: Currency 3-char code
                            maxLength: 3
                  - $ref: '#/components/responses/ErrorFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/payment/calculate/fee:
    post:
      deprecated: true # TODO API-5213
      summary: Response fee for payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentRequestCalculateFee'
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestCalculateFee'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: SUCCESS
                      data:
                        type: object
                        properties:
                          fee:
                            type: string
                            description: Fee for payment
                          total:
                            type: string
                            description: Fee + amount for payment
                          currencyId:
                            type: string
                            description: Currency 3-char code
                            maxLength: 3
                  - $ref: '#/components/responses/ErrorFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      deprecated: true # TODO API-5213
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/payment/calculate/max-amount:
    post:
      summary: Response max amount for wallet
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentRequestCalculateMaxAmount'
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestCalculateMaxAmount'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: SUCCESS
                      data:
                        type: object
                        properties:
                          maxAmount:
                            type: number
                            description: Max payment amount
                  - $ref: '#/components/responses/ErrorFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/payment/calculate/max-amount:
    post:
      deprecated: true # TODO API-5213
      summary: Response max amount for wallet
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentRequestCalculateMaxAmount'
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestCalculateMaxAmount'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: SUCCESS
                      data:
                        type: object
                        properties:
                          maxAmount:
                            type: string
                            description: Max payment amount
                  - $ref: '#/components/responses/ErrorFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      deprecated: true # TODO API-5213
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/payment/upload:
    post:
      summary: Upload payment files
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/payment/sign:
    post:
      deprecated: true
      summary: Execute DRAFT payment
      tags: [ payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  description: Payment id (integer) or payment uuid (UUID string)
                  items:
                    type: integer
                signToken:
                  type: string
                  description: Sign token
              required:
                - id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      deprecated: true
      tags: [ payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/wish-list:
    get:
      summary: Show wish list
      tags: [ wish list ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishList'
        401:
          $ref: '#/components/responses/Unauthorized'

    patch:
      summary: Update wish list
      tags: [ wish list ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WishList'
          application/json:
            schema:
              $ref: '#/components/schemas/WishList'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ wish list ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v3/currency-exchange:
    get:
      summary: Show currency exchange list
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Before'
        - $ref: '#/components/parameters/After'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CurrencyExchangeV3'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ currency exchange ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v2/currency-exchange:
    get:
      deprecated: true
      summary: Show currency exchange list
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CurrencyExchangeV2'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create currency exchange
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeCreate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ currency exchange ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v3/currency-exchange/{id}:
    get:
      summary: Show currency exchange
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyExchangeV3'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ currency exchange ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS
        404:
          $ref: '#/components/responses/NotFound'

  /v2/currency-exchange/{id}:
    get:
      deprecated: true
      summary: Show currency exchange
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyExchangeV2'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      deprecated: true
      tags: [ currency exchange ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/currency-exchange/calculate/fee:
    post:
      summary: Get fee for currency exchange
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculate'
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: SUCCESS
                      data:
                        type: object
                        properties:
                          fee:
                            type: number
                            description: Fee for currency exchange
                          total:
                            type: number
                            description: Fee + amount for currency exchange
                          currencyId:
                            type: string
                            description: Currency 3-char code
                            maxLength: 3
                  - $ref: '#/components/responses/ErrorFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ currency exchange ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/currency-exchange/calculate/fee:
    post:
      deprecated: true # TODO API-5213
      summary: Get fee for currency exchange
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculate'
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: SUCCESS
                      data:
                        type: object
                        properties:
                          fee:
                            type: string
                            description: Fee for currency exchange
                          total:
                            type: string
                            description: Fee + amount for currency exchange
                          currencyId:
                            type: string
                            description: Currency 3-char code
                            maxLength: 3
                  - $ref: '#/components/responses/ErrorFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      deprecated: true # TODO API-5213
      tags: [ currency exchange ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/currency-exchange/calculate/max-amount:
    post:
      summary: Get max amount for currency exchange
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculateMaxAmount'
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculateMaxAmount'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    description: response status
                    enum:
                      - SUCCESS
                      - ERROR
                  data:
                    type: object
                    properties:
                      maxAmount:
                        type: number
                        description: Max payment amount
                  errors:
                    type: object
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ currency exchange ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/currency-exchange/calculate/max-amount:
    post:
      deprecated: true # TODO API-5213
      summary: Get max amount for currency exchange
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculateMaxAmount'
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculateMaxAmount'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    description: response status
                    enum:
                      - SUCCESS
                      - ERROR
                  data:
                    type: object
                    properties:
                      maxAmount:
                        type: string
                        description: Max payment amount
                  errors:
                    type: object
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      deprecated: true # TODO API-5213
      tags: [ currency exchange ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/currency-exchange/calculate/result:
    post:
      summary: Intended exchange result
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculate'
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    description: response status
                    enum:
                      - SUCCESS
                      - ERROR
                  data:
                    type: object
                    properties:
                      amount:
                        type: number
                        description: Currency exchange result
                      currencyId:
                        type: string
                        description: Currency 3-char code
                        maxLength: 3
                      rate:
                        type: number
                        description: Currency exchange rate
                  errors:
                    type: object
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ currency exchange ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/currency-exchange/calculate/result:
    post:
      deprecated: true
      summary: Intended exchange result
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculate'
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyExchangeRequestCalculate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    description: response status
                    enum:
                      - SUCCESS
                      - ERROR
                  data:
                    type: object
                    properties:
                      amount:
                        type: string
                        description: Currency exchange result
                      currencyId:
                        type: string
                        description: Currency 3-char code
                        maxLength: 3
                      rate:
                        type: string
                        description: Currency exchange rate
                  errors:
                    type: object
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      deprecated: true
      tags: [ currency exchange ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/currency-exchange/list/debit-wallet:
    get:
      summary: Get list of available debit wallet IDs
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  debitWalletID:
                    type: array
                    description: debit wallet ID list
                    items:
                      type: integer
                      example: 1
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ currency exchange ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/currency-exchange/list/debit-wallet/{debitWalletID}:
    get:
      summary: Get list of available credit wallet IDs
      tags: [ currency exchange ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: debitWalletID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  creditWalletID:
                    type: array
                    description: credit wallet ID list
                    items:
                      type: integer
                      example: 1
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ currency exchange ]
      parameters:
        - in: path
          name: debitWalletID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v3/wallet:
    get:
      summary: Wallet search
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [ ACTIVE, BLOCKED, CLOSED ]
        - in: query
          name: isVisible
          schema:
            type: integer
            enum: [ 0, 1 ]
        - in: query
          name: isFavourite
          schema:
            type: integer
            enum: [ 0, 1 ]
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/WalletExpandV2'
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletV3'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ wallet ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/crypto/payment:
    get:
      summary: Show crypto payment list
      tags: [ crypto payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: status[]
          schema:
            type: array
            items:
              type: string
              enum:
                - new
                - process
                - completed
                - rejected
        - in: query
          name: dateFrom
          description: Date from in unix or millisecond unix time format
          schema:
            type: integer
        - in: query
          name: dateTo
          description: Date to in unix or millisecond unix time format
          schema:
            type: integer
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CryptoPaymentItemResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create crypto payment
      deprecated: true
      tags: [ crypto payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCreate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ crypto payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v2/crypto/payment:
    post:
      summary: Create crypto payment
      tags: [ crypto payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
        - in: query
          name: signToken
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCreateV2'
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCreateV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/Validate'
        202:
          $ref: '#/components/responses/Sign'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ crypto payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/crypto/payment/{id}:
    get:
      summary: Show crypto payment
      tags: [ crypto payment ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoPaymentItemResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    options:
      tags: [ crypto payment ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/crypto/payment/calculate:
    post:
      deprecated: true
      summary: Calculate crypto payment
      tags: [ crypto payment ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCalculate'
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCalculate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoPaymentCalculateResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      deprecated: true
      tags: [ crypto payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/crypto/payment/calculate/buy:
    post:
      summary: Calculate crypto payment (buy)
      tags: [ crypto payment ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCalculateBuy'
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCalculateBuy'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoPaymentCalculateBuyResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ crypto payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/crypto/payment/calculate/sell:
    post:
      summary: Calculate crypto payment (sell)
      tags: [ crypto payment ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCalculateSell'
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoPaymentCalculateSell'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoPaymentCalculateSellResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ crypto payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/crypto/payment/list/wallet:
    get:
      summary: Show list of wallets available for crypto payments (buy)
      tags: [ crypto payment ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoPaymentWalletListResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    options:
      tags: [ crypto payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/crypto/payment/list/crypto-network:
    get:
      summary: Show list of available crypto networks (buy)
      tags: [ crypto payment ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoPaymentNetworkListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
    options:
      tags: [ crypto payment ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/crypto/address:
    post:
      summary: Create a crypto address
      tags: [ crypto address ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CryptoAddressCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoAddressCreate'
      responses:
        201:
          $ref: '#/components/responses/Created'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/ValidationError'
    get:
      summary: Get crypto addresses for wallet
      tags: [ crypto address ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: walletId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoAddressResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    options:
      tags: [ crypto address ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v1/crypto/address/{id}:
    get:
      summary: Get crypto address by id
      tags: [ crypto address ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoAddressResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete crypto address
      tags: [ crypto address ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: signToken
          schema:
            type: string
      responses:
        202:
          $ref: '#/components/responses/Sign'
        204:
          description: No content
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        429:
          $ref: '#/components/responses/TooManyRequests'
    options:
      tags: [ crypto address ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, DELETE, OPTIONS

  /v1/crypto/address/list/network:
    get:
      summary: Show list of available crypto networks (sell)
      tags: [ crypto address ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoPaymentNetworkListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
    options:
      tags: [ crypto address ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/crypto/address/risk-score:
    post:
      summary: Check risk score for crypto address
      tags: [ crypto address ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CryptoAddressRiskScore'
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoAddressRiskScore'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  allowed:
                    type: boolean
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        422:
          $ref: '#/components/responses/ValidationError'
    options:
      tags: [ crypto address ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/wallet:
    get:
      deprecated: true # TODO API-5213
      summary: Wallet search
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [ ACTIVE, BLOCKED, CLOSED ]
        - in: query
          name: isVisible
          schema:
            type: integer
            enum: [ 0, 1 ]
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/WalletExpandV2'
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletV2'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      deprecated: true # TODO API-5213
      tags: [ wallet ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/wallet:
    post:
      summary: Create wallet
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateWallet'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWallet'
      responses:
        200:
          description: OK
          headers:
            x-id:
              description: Id new wallet
              schema:
                type: integer
          content:
            application/json:
              example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ wallet ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v3/wallet/{id}:
    get:
      summary: get wallet by id
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/WalletExpandV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletV3'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    patch:
      summary: update wallet by id
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WalletUpdateV3'
          application/json:
            schema:
              $ref: '#/components/schemas/WalletUpdateV3'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Wallet close
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ wallet ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, DELETE, OPTIONS

  /v3/wallet/{id}/favourite:
    put:
      summary: make wallet favorite
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WalletMakeFavorite'
          application/json:
            schema:
              $ref: '#/components/schemas/WalletMakeFavorite'
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: PUT, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: PUT, OPTIONS

  /v2/wallet/{id}:
    get:
      deprecated: true # TODO API-5213
      summary: get wallet by id
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/WalletExpandV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletV2'
        401:
          $ref: '#/components/responses/Unauthorized'

    patch:
      deprecated: true # API-9080
      summary: update wallet by id
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WalletUpdateV2'
          application/json:
            schema:
              $ref: '#/components/schemas/WalletUpdateV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ wallet ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/wallet/{id}/top-up/card:
    post:
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WalletTopUpCard'
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTopUpCard'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    description: SUCCESS
                  id:
                    type: string
                    description: Payment UUID (optional)

    options:
      tags: [ wallet ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/wallet/{id}/top-up/calculate/fee:
    post:
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TopUpWalletFee'
          application/json:
            schema:
              $ref: '#/components/schemas/TopUpWalletFee'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  fee:
                    type: number
                    description: Fee for top-up
                  total:
                    type: number
                    description: Credit amount - Fee
                  currency_id:
                    type: string
                    description: Currency 3-char code
                    maxLength: 3
                  errors:
                    type: object

    options:
      tags: [ wallet ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/wallet/{id}/top-up/fee:
    post:
      deprecated: true # TODO API-6307
      tags: [ wallet ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TopUpWalletFee'
          application/json:
            schema:
              $ref: '#/components/schemas/TopUpWalletFee'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  fee:
                    type: number
                    description: Fee for top-up
                  total:
                    type: number
                    description: Credit amount - Fee
                  currency_id:
                    type: string
                    description: Currency 3-char code
                    maxLength: 3
                  errors:
                    type: object

    options:
      deprecated: true # TODO API-6307
      tags: [ wallet ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/wallet/{wallet_id}/payment.{format}:
    get:
      deprecated: true # TODO API-2171
      tags: [ wallet report ]
      security:
        - BearerAuth: [ ]
      parameters:
        - name: wallet_id
          in: path
          required: true
          schema:
            type: integer
        - name: format
          in: path
          required: true
          schema:
            type: string
            enum: [ xml, pdf, csv ]
        - name: dateFrom
          in: query
          description: 01.01.2020
          schema:
            type: string
        - name: dateTo
          in: query
          description: 01.01.2020
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
            enum: [ any, debit, credit ]
            default: any
        - name: include_fee_payment
          in: query
          schema:
            default: "1"
            type: integer
            enum: [ 0, 1 ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                    description: unique hash id
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      deprecated: true # TODO API-2171
      tags: [ wallet report ]
      parameters:
        - name: wallet_id
          in: path
          required: true
          schema:
            type: integer
        - name: format
          in: path
          required: true
          schema:
            type: string
            enum: [ xml, pdf, csv ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/wallet/{walletId}/payment:
    get:
      deprecated: true # API-2171
      summary: Display list of payments
      tags: [ wallet report ]
      security:
        - BearerAuth: [ ]
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            type: string
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentExpand'
        - in: query
          name: type
          schema:
            type: string
            enum: [ ANY, DEBIT, CREDIT ]
        - in: query
          name: dateFrom
          description: Timestamp
          schema:
            type: integer
        - in: query
          name: dateTo
          description: Timestamp
          schema:
            type: integer
        - name: includeFeePayment
          in: query
          schema:
            default: 1
            type: integer
            enum: [ 0, 1 ]
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentV2'

    options:
      deprecated: true #API-2171
      tags: [ wallet report ]
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/wallet/{wallet_id}/payment:
    get:
      deprecated: true
      summary: Display list of payments
      tags: [ wallet report ]
      security:
        - BearerAuth: [ ]
      parameters:
        - name: wallet_id
          in: path
          required: true
          schema:
            type: string
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/PaymentExpand'
        - in: query
          name: type
          schema:
            type: string
            enum: [ any, debit, credit ]
        - in: query
          name: dateFrom
          description: 01.01.2020
          schema:
            type: string
        - in: query
          name: dateTo
          description: 01.01.2020
          schema:
            type: string
        - name: include_fee_payment
          in: query
          schema:
            default: 1
            type: integer
            enum: [ 0, 1 ]
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentV1'

    options:
      deprecated: true
      tags: [ wallet report ]
      parameters:
        - name: wallet_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/wallet/report:
    get:
      summary: Display list of generated reports
      tags: [ wallet report ]
      parameters:
        - in: query
          name: description
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletReportResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create wallet report
      tags: [ wallet report ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WalletReport'
          application/json:
            schema:
              $ref: '#/components/schemas/WalletReport'
      responses:
        200:
          description: OK. Returns ws-channel id (and it's hashId of report)
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                    description: unique hash id
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ wallet report ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/wallet/report/{id}:
    delete:
      summary: Delete wallet report
      tags: [ wallet report ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
    options:
      tags: [ wallet report ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: DELETE, OPTIONS

  /v2/wallet/{walletId}/report:
    post:
      deprecated: true #API-8705
      summary: Create wallet report
      tags: [ wallet report ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: walletId
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WalletReportWalletId'
          application/json:
            schema:
              $ref: '#/components/schemas/WalletReportWalletId'
      responses:
        200:
          description: OK. Returns ws-channel id (and it's hashId of report)
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                    description: unique hash id
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      deprecated: true #API-8705
      tags: [ wallet report ]
      parameters:
        - in: path
          name: walletId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/beneficiary:
    get:
      summary: Get list of available beneficiaries
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: name
          description: Filter by beneficiary name
          schema:
            type: string
        - in: query
          name: iban
          description: Filter by beneficiary IBAN
          schema:
            type: string
        - in: query
          name: currency_id
          description: Filter by beneficiary currency
          schema:
            type: string
            example: "EUR"
        - in: query
          name: search
          description: Heuristic filter (by beneficiary name or IBAN or currency)
          schema:
            type: string
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/BeneficiaryExpand'
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beneficiary'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Beneficiary create
      description: see /v2/beneficiary
      deprecated: true
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateBeneficiaryV1'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBeneficiaryV1'
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    patch:
      summary: Batch update beneficiary
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  type: string
                  description: UUID
                  example: "e8262379-b2ba-4865-b487-6967a6713461"
                items:
                  type: array
                  items:
                    properties:
                      uuid:
                        type: string
                        description: Beneficiary id for sorting
                        example: "e8262379-b2ba-4865-b487-6967a671346b"
                      sortOrder:
                        type: integer
                        description: Sorting order
                    required:
                      - uuid
                      - sortOrder
              required:
                - items
      responses:
        200:
          $ref: '#/components/responses/Validate'
        201:
          $ref: '#/components/responses/Created'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/ValidationError'

    options:
      tags: [ beneficiary ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, PATCH, OPTIONS

  /v2/beneficiary:
    post:
      summary: Beneficiary create
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateBeneficiaryV2'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBeneficiaryV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ beneficiary ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/beneficiary/{id}:
    get:
      summary: Get detailed information about beneficiary
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Beneficiary id for detalization
        - in: query
          name: expand
          explode: false
          schema:
            $ref: '#/components/schemas/BeneficiaryExpand'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beneficiary'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Beneficiary update
      description: Update beneficiary name
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateBeneficiaryV1'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBeneficiaryV1'
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    delete:
      summary: Delete beneficiary action
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ beneficiary ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, DELETE, OPTIONS

  /v1/beneficiary/iban-info/{iban}:
    get:
      summary: Get IBAN information
      deprecated: true
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: iban
          required: true
          schema:
            type: string
            description: IBAN number
            example: NL13RABO4448094871
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  is_sepa:
                    type: boolean
                    description: IBAN in SEPA
                  bic_swift:
                    type: string
                    description: BIC for IBAN
                  country_id:
                    type: string
                    description: Country ID
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ beneficiary ]
      deprecated: true
      parameters:
        - in: path
          name: iban
          required: true
          schema:
            type: string
            description: IBAN number
            example: NL13RABO4448094871
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/beneficiary/iban-info:
    post:
      summary: Get IBAN information
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BeneficiaryIbanInfoV2'
          application/json:
            schema:
              $ref: '#/components/schemas/BeneficiaryIbanInfoV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  isSepa:
                    type: boolean
                    description: IBAN in SEPA
                  bicSwift:
                    type: string
                    description: BIC/SWIFT bank code
                  countryId:
                    type: string
                    description: Country ID
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ beneficiary ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/beneficiary/currency-list:
    get:
      summary: Get currency list
      tags: [ beneficiary ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [
                {
                  "id": "EUR",
                  "label": "Euro"
                },
                {
                  "id": "GBP",
                  "label": "British Pound"
                },
                {
                  "id": "USD",
                  "label": "United States Dollar"
                }
              ]
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ beneficiary ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/country:
    get:
      summary: Countries list
      tags: [ country ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'

    options:
      tags: [ country ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/mfa:
    get:
      summary: List of allowed MFA types
      tags: [ mfa ]
      security:
        - BasicAuth: [ ]
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: array
                    items:
                      type: string
                      enum:
                        - sms
                        - google
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ mfa ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v2/mfa/google:
    get:
      summary: Return data for changing option
      tags: [ mfa ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  secretCode:
                    type: string
                    description: Personal secret code for saving in the safe place
                    example: A4VHLOH6M2UPDNHK
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Enable Google MFA verifications
      tags: [ mfa ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GoogleMfaEnable'
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleMfaEnable'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    delete:
      summary: Disable Google MFA verifications
      tags: [ mfa ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GoogleMfaDisable'
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleMfaDisable'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ mfa ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, DELETE, OPTIONS

  /v2/mfa/{type}/sign/{requestId}:
    post:
      tags: [ mfa ]
      security:
        - BearerAuth: [ ]
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            default: sms
            description: Type for MFA
            enum:
              - sms
              - google
        - in: path
          name: requestId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: "111111"
                  description: Verification code
                  maxLength: 6
              required:
                - code
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        type: string
                        example: SUCCESS
                      data:
                        type: object
                        properties:
                          signToken:
                            type: string
                            required: true
                            example: eyJhbGciOiJSUzI1NiJ9.eyJzaWduSWQiOiI5YjJjZm
                  - $ref: '#/components/responses/ErrorFormResponse'
    options:
      tags: [ mfa ]
      security:
        - BearerAuth: [ ]
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
            example: "google"
            description: Type for MFA
            enum:
              - sms
              - google
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/mfa/sms/send/{requestId}:
    post:
      tags: [ mfa ]
      security:
        - BearerAuth: [ ]
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client:
                  type: object
                  properties:
                    id:
                      type: string
                      example: altpay.uk
                      description: Identifier of application. For IOS it's a domain - altpay.uk, for android it's a 11-characters string - FA+9qCX9VSu
                    os:
                      type: string
                      example: IOS
                      description: IOS or Android
                      enum:
                        - IOS
                        - ANDROID

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
    options:
      tags: [ mfa ]
      security:
        - BearerAuth: [ ]
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/notification:
    get:
      summary: Get notification list
      tags: [ notification ]
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
        - in: query
          name: isViewed
          schema:
            type: integer
            enum: [ 0, 1 ]
        - in: query
          name: type
          schema:
            type: string
            enum: [ DEFAULT, REQUIRED ]

      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationV2'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ notification ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v2/notification/{id}:
    get:
      summary: Get detailed information about the notification
      tags: [ notification ]
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationV2'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Mark the notification as read
      tags: [ notification ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  result:
                    type: boolean
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ notification ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v2/notification/info:
    get:
      summary: Get unread notification list
      tags: [ notification ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  allUnread:
                    type: integer
                    description: Count of all unread notifications
                  requiredUnread:
                    type: integer
                    description: Count of required unread notifications
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ notification ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/notification:
    patch:
      summary: Update email notification action. Use patch /v1/notification/settings
      deprecated: true # TODO API-2390
      tags: [ notification ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationSettingsUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettingsUpdate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    label:
                      type: string
                      description: Label for displaying
                    value:
                      type: boolean
                      description: Enabled or disabled notification
                    name:
                      type: string
                      description: Property unique name
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ notification ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: PATCH, OPTIONS

  /v1/notification/settings:
    get:
      summary: Get notification list
      tags: [ notification ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    label:
                      type: string
                      description: Label for displaying
                    value:
                      type: boolean
                      description: Enabled or disabled notification
                    name:
                      type: string
                      description: Property unique name
                    group:
                      type: string
                      description: Property group
        401:
          $ref: '#/components/responses/Unauthorized'

    patch:
      summary: Update user notification settings
      tags: [ notification ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationSettingsUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettingsUpdate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    label:
                      type: string
                      description: Label for displaying
                    value:
                      type: boolean
                      description: Enabled or disabled notification
                    name:
                      type: string
                      description: Property unique name
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ notification ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v1/member:
    get:
      deprecated: true
      summary: Get list of sub users
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: name
          description: Filter by member name
          schema:
            type: string
        - in: query
          name: phone
          description: Filter by member phone
          schema:
            type: string
        - in: query
          name: email
          description: Filter by member email
          schema:
            type: string
        - in: query
          name: search
          description: Heuristic filter (by member name or phone or email)
          schema:
            type: string
        - in: query
          name: role
          schema:
            type: string
            enum:
              - fullAccess
              - partialAccess
              - onlyView
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberV1'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      deprecated: true
      tags: [ member ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/member:
    get:
      summary: Get list of sub users
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: name
          description: Filter by member name
          schema:
            type: string
        - in: query
          name: phone
          description: Filter by member phone
          schema:
            type: string
        - in: query
          name: email
          description: Filter by member email
          schema:
            type: string
        - in: query
          name: search
          description: Heuristic filter (by member name or phone or email)
          schema:
            type: string
        - in: query
          name: role
          schema:
            type: string
            enum:
              - fullAccess
              - partialAccess
              - onlyView
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberV2'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Invite sub user
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MemberInviteV2'
            encoding:
              walletAccess[]:
                explode: true
          application/json:
            schema:
              $ref: '#/components/schemas/MemberInviteV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ member ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/member/{id}:
    get:
      deprecated: true
      summary: Get detailed information about member(user)
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Member id for detalization
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberV1'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      deprecated: true
      tags: [ member ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, DELETE, OPTIONS

  /v2/member/{id}:
    get:
      summary: Get detailed information about member(user)
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Member id for detalization
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberV2'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update sub user
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberUpdateV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    delete:
      summary: Delete sub user
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                signToken:
                  type: string
                  description: Sign token
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ member ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: PATCH, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: PATCH, DELETE, OPTIONS

  /v1/member/roles:
    get:
      deprecated: true
      summary: Get user roles list
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [
                {
                  "id": "onlyView",
                  "label": "View only access"
                },
                {
                  "id": "partialAccess",
                  "label": "Partial access"
                },
                {
                  "id": "fullAccess",
                  "label": "Full access"
                }
              ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      deprecated: true
      tags: [ member ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/member/list/wallet-access:
    get:
      summary: Get available wallet UUID's for editing walletAccess
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [
                "e8262379-b2ba-4865-b487-6967a671346b",
                "e8262379-b2ba-4865-b487-6967a671346b"
              ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ member ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/member/list/roles:
    get:
      summary: Get user roles list
      tags: [ member ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [
                {
                  "id": "onlyView",
                  "label": "View only access"
                },
                {
                  "id": "partialAccess",
                  "label": "Partial access"
                },
                {
                  "id": "fullAccess",
                  "label": "Full access"
                }
              ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ member ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/info:
    get:
      tags: [ info ]
      summary: API Information
      responses:
        200:
          description: OK
          content:
            application/json:
              example: {
                "version": "1.0.0",
                "available": {
                  "app": true,
                  "reg": false
                },
                "settings": {
                  "brand_name": "AltPay LTD",
                  "email_info": "info@altpay.uk",
                  "email_support": "info@altpay.uk",
                  "title": "AltPay",
                  "description": "AltPay",
                  "logo_file": "https://app.altpay.my/storage/logo.jpg",
                  "registration_logo": "https://app.altpay.my/storage/registration_logo.jpg",
                  "registration_css_url": "https://app.altpay.my/storage/style.1_registration.css",
                  "css_url": "https://app.altpay.my/storage/style.1.css",
                  "js_url": "https://app.altpay.my/storage/script.1.js",
                  "favicon_url": "https://app.altpay.my/storage/icon.ico"
                },
                "responseTime": "122 ms"
              }

    options:
      tags: [ info ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/features:
    post:
      tags: [ features ]
      summary: API features
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Array of available features on client
              example: [ "CARD", "CARD2" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  type: string
                example: [ "CARD" ]

    options:
      tags: [ features ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/user:
    get:
      deprecated: true
      summary: Get user data
      tags: [ user ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV1'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      deprecated: true
      tags: [ user ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v2/user:
    get:
      summary: Get user data
      tags: [ user ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserV2'
        401:
          $ref: '#/components/responses/Unauthorized'

    delete:
      deprecated: true
      summary: Close current account
      tags: [ user ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                signToken:
                  type: string
                  description: Sign token
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    patch:
      deprecated: true
      summary: Update a field. Confirmation codes should be provided to complete this action.
      tags: [ user ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: New email
                phone:
                  type: string
                  description: New phone number
                chatId:
                  type: string
                  description: Chat id
                  maxLength: 256
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: New email
                phone:
                  type: string
                  description: New phone number
                chatId:
                  type: string
                  description: Chat id
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ user ]
      deprecated: true
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, DELETE, OPTIONS

  /v1/owner:
    patch:
      summary: Update account owner
      tags: [ owner ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
        - in: query
          name: signToken
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                email:
                  type: string
                phone:
                  type: string
                chatId:
                  type: string
                  maxLength: 256
                  nullable: true
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                email:
                  type: string
                phone:
                  type: string
                chatId:
                  type: string
                  maxLength: 256
                  nullable: true
      responses:
        200:
          $ref: '#/components/responses/Validate'
        202:
          $ref: '#/components/responses/Sign'
        204:
          description: No content
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/ValidationError'
        429:
          $ref: '#/components/responses/TooManyRequests'

    delete:
      summary: Close current account
      tags: [ owner ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: signToken
          schema:
            type: string
      responses:
        202:
          $ref: '#/components/responses/Sign'
        204:
          description: No content
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        429:
          $ref: '#/components/responses/TooManyRequests'

    options:
      tags: [ owner ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: PATCH, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: PATCH, DELETE, OPTIONS

  /v1/company:
    get:
      summary: Get company data
      tags: [ company ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        401:
          $ref: '#/components/responses/Unauthorized'

    options:
      tags: [ company ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/company:
    delete:
      summary: Close company
      tags: [ company ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                signToken:
                  type: string
                  description: Sign token
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ company ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: DELETE, OPTIONS

  /v1/registration/{type}:
    post:
      tags: [ registration ]
      summary: Создаёт или получает модель регистрации используя первичную информация о пользователе
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - individual
              - business
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationUserWithRef'
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationUserWithRef'
      responses:
        200:
          description: OK
          headers:
            x-id:
              description: Id новой модели регистрации
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                example:
                  email:
                    - Email cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'
        405:
          $ref: '#/components/responses/MethodNotAllowed'
          
    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - individual
              - business
              - wallet
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/registration/resume:
    post:
      tags: [ registration ]
      summary: Sends an email with a link to continue registration
      description: |
        If a password is specified, it will return the x-id header with the registration token in response,
        otherwise an email with a link to continue registration will be sent to the specified email.
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              email with a link to continue registration:
                value:
                  email: "string@mail.ru"
              response the x-id header with the registration token:
                value:
                  email: "string@mail.ru"
                  password: "123"
      responses:
        200:
          description: OK
          headers:
            x-id:
              schema:
                type: string
              description: Token регистрации
          content:
            application/json:
              schema:
                type: object
                example:
                  email:
                    - Email cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'

    options:
      tags: [ registration ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/registration/email/code:
    post:
      tags: [ registration ]
      summary: Отправляет код для подтверждения email
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              email:
                value:
                  email: "string@mail.ru"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  email:
                    - Email cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'

    options:
      tags: [ registration ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/registration/{id}:
    get:
      tags: [ registration ]
      summary: Возвращает все блоки данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 6035519343a46
                  type:
                    type: string
                    example: BUSINESS
                  continue:
                    type: string
                    example: https://altpay.uk/registration/3b29b35d3a1a5
                    description: Url to continue registration for the web version
                  user:
                    type: object
                    properties:
                      isCompleted:
                        type: boolean
                      attributes:
                        $ref: '#/components/schemas/RegistrationUser'
                      errors:
                        type: object
                  verification:
                    type: object
                    properties:
                      isCompleted:
                        type: boolean
                      attributes:
                        type: object
                        properties:
                          token:
                            type: string
                            example: c4a5965aaf764649b23534c142d1a53c
                            maxLength: 32
                      errors:
                        type: object
                  company:
                    type: object
                    properties:
                      isCompleted:
                        type: boolean
                      attributes:
                        $ref: '#/components/schemas/RegistrationCompanyBusiness'
                      errors:
                        type: object
                  address:
                    type: object
                    properties:
                      isCompleted:
                        type: object
                        properties:
                          LEGAL:
                            type: boolean
                          OPERATING:
                            type: boolean
                      errors:
                        type: object
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            attributes:
                              $ref: '#/components/schemas/RegistrationAddress'
                            errors:
                              type: object
                  member:
                    type: object
                    properties:
                      isCompleted:
                        type: object
                        properties:
                          DIRECTOR:
                            type: boolean
                          UBO:
                            type: boolean
                      errors:
                        type: object
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            attributes:
                              $ref: '#/components/schemas/RegistrationMember'
                            errors:
                              type: object
                  kyc:
                    type: object
                    properties:
                      isCompleted:
                        type: boolean
                      attributes:
                        $ref: '#/components/schemas/RegistrationKyc'
                      errors:
                        type: object
                  counterparty:
                    type: object
                    properties:
                      isCompleted:
                        type: object
                        properties:
                          INCOMING_PAYMENTS:
                            type: boolean
                          OUTGOING_PAYMENTS:
                            type: boolean
                      errors:
                        type: object
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            attributes:
                              $ref: '#/components/schemas/RegistrationCounterparty'
                            errors:
                              type: object
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/registration/list:
    get:
      tags: [ registration ]
      summary: Возвращает списки данных необходимые для заполнения формы
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object

    options:
      tags: [ registration ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/registration/list/sic-code:
    get:
      tags: [ registration ]
      summary: Returns SIC codes list filtered by code or description
      parameters:
        - name: search
          in: query
          description: Heuristic filter used to find SIC codes by code or description.
            Please see full list of SIC codes [here](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/527619/SIC07_CH_condensed_list_en.csv/preview).
          schema:
            type: string
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: OTHER code is always included at the end of the list.
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                type: array
                example: [
                  {
                    "id": "10520",
                    "label": "Manufacture of ice cream"
                  },
                  {
                    "id": "OTHER",
                    "label": "Other (please specify)"
                  }
                ]
        400:
          $ref: '#/components/responses/BadRequest'

    options:
      tags: [ registration ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/registration/{id}/user:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationUser'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [ registration ]
      summary: Обновляет блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationUser'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  name:
                    - Company name cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v1/registration/{id}/verification:
    get:
      tags: [ registration ]
      summary: Получает и сохраняет данные из ondato
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags: [ registration ]
      summary: Возвращает url на ondato для прохождения верификации
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: send
          description: Отправляет ссылку на почту клиента
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "https://sandbox-bo.ondato.com/app/identifications/details/9d24253af4d9c28"
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags: [ registration ]
      summary: Получает и сохраняет данные с ondato по token
      parameters:
        - in: path
          name: id
          description: Ondato token
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            x-id:
              description: Id модели регистрации
              schema:
                type: string
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [ registration ]
      summary: Подтверждает прохождение верификации
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                ondato_token:
                  description: Ondato token
                  example: Ondato token
                  type: string
                  maxLength: 32
              required:
                - ondato_token
          application/json:
            schema:
              type: object
              properties:
                ondato_token:
                  description: Ondato token
                  example: Ondato token
                  type: string
              required:
                - ondato_token
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, PUT, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, PUT, PATCH, OPTIONS

  /v1/registration/{id}/company-business:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationCompanyBusiness'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [ registration ]
      summary: Обновляет блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCompanyBusiness'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  name:
                    - Company name cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v1/registration/{id}/kyc:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationKyc'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [ registration ]
      summary: Обновляет блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationKyc'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  monthly_turnover:
                    - Monthly turnover cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v1/registration/{id}/address:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistrationAddress'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags: [ registration ]
      summary: Добавление блока данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationAddress'
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationAddress'
      responses:
        201:
          description: Created
          headers:
            x-id:
              description: Id нового блока данных
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                example:
                  name:
                    - Company name cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v1/registration/{id}/address/{type}:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - LEGAL
              - OPERATING
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationAddress'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [ registration ]
      summary: Обновляет блока данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - LEGAL
              - OPERATING
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationAddress'
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationAddress'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  city:
                    - City name cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ registration ]
      summary: Удаление блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - LEGAL
              - OPERATING
      responses:
        200:
          description: OK
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - LEGAL
              - OPERATING
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, DELETE, OPTIONS

  /v1/registration/{id}/member:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistrationMember'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags: [ registration ]
      summary: Добавление блока данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationMember'
      responses:
        200:
          description: Errors
          content:
            application/json:
              schema:
                type: object
                example:
                  name:
                    - Company name cannot be blank.
        201:
          description: Created
          headers:
            x-id:
              description: Id нового блока данных
              schema:
                type: string
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v1/registration/{id}/member/{sid}:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: sid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationMember'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [ registration ]
      summary: Обновляет блока данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: sid
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationMember'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  city:
                    - City name cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ registration ]
      summary: Удаление блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: sid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: sid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, DELETE, OPTIONS

  /v1/registration/{id}/counterparty:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistrationCounterparty'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags: [ registration ]
      summary: Добавление блока данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCounterparty'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationCounterparty'
      responses:
        200:
          description: Errors
          content:
            application/json:
              schema:
                type: object
                example:
                  files[0][name]:
                    - "File 'xxx' must be loaded."
        201:
          description: Created
          headers:
            x-id:
              description: Id нового блока данных
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                example:
                  name:
                    - Company name cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v1/registration/{id}/counterparty/{sid}:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: sid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationCounterparty'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [ registration ]
      summary: Обновляет блока данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: sid
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCounterparty'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegistrationCounterparty'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  city:
                    - City name cannot be blank.
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [ registration ]
      summary: Удаление блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: sid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: sid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, DELETE, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, DELETE, OPTIONS

  /v1/registration/{id}/company-individual:
    get:
      tags: [ registration ]
      summary: Возвращает блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistrationCompanyIndividual'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      tags: [ registration ]
      summary: Обновляет/добавляет блок данных
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCompanyIndividual'
      responses:
        200:
          description: OK
          content:
            application/json:
              examples:
                success:
                  value: [ ]
                validation error:
                  value: {
                    "first_name": [
                      "First Name cannot be blank."
                    ]
                  }
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v1/registration/{id}/finish:
    post:
      tags: [ registration ]
      summary: Завершение регистрации
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                agree:
                  default: 1
                  type: integer
                  enum: [ 0, 1 ]
              required:
                - agree
          application/json:
            schema:
              type: object
              properties:
                agree:
                  default: 1
                  type: integer
                  enum: [ 0, 1 ]
              required:
                - agree
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  agree:
                    - Please accept Terms and Conditions
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ registration ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/registration/upload:
    post:
      tags: [ registration ]
      summary: Загрузка файлов на сервер
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.
              required:
                - file
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  original_name:
                    type: string
                    example: image.png
                    maxLength: 128
                  name:
                    type: string
                    example: 5f72f6b052076.png
                    description: Generate new unique file name
                    maxLength: 128
                  type:
                    type: string
                    example: image/gif
                    description: MIME-type of the uploaded file
                  size:
                    type: integer
                    example: 100500
                    description: size of the uploaded file in bytes
                  url:
                    type: string
                    example: https://altpay.uk/registration/tmp/5f72f6b052076.png
        400:
          $ref: '#/components/responses/BadRequest'

    get:
      tags: [ registration ]
      summary: Возвращает информацию о файлах которые можно загрузить
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  extensions:
                    type: array
                    example: [ pdf, jpg, png, jpeg ]

    options:
      tags: [ registration ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/registration/company/search:
    get:
      tags: [ registration ]
      summary: Поиск компании в публичной базе компаний
      parameters:
        - in: query
          name: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              example: [
                {
                  "company_number": "11347482",
                  "company_type": "ltd",
                  "title": "ALTPAY LTD",
                  "address": {
                    "country": "England",
                    "premises": "Level 18",
                    "address_line_1": "40 Bank Street",
                    "locality": "London",
                    "postal_code": "E14 5NR",
                    "address_line_2": "Canary Wharf"
                  },
                  "address_snippet": "Level 18 40 Bank Street, Canary Wharf, London, England, E14 5NR",
                  "registered_at": 1525392000
                },
                {
                  "company_number": "12696765",
                  "company_type": "ltd",
                  "title": "ALTPAYMENTS LIMITED",
                  "address": {
                    "premises": "20-22",
                    "country": "England",
                    "postal_code": "N1 7GU",
                    "address_line_1": "Wenlock Road",
                    "locality": "London"
                  },
                  "address_snippet": "20-22 Wenlock Road, London, England, N1 7GU",
                  "registered_at": 1593043200
                }
              ]
        400:
          $ref: '#/components/responses/BadRequest'

    options:
      tags: [ registration ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/sap:
    get:
      tags: [ sap ]
      summary: Quarterly statistics on availability and performance of dedicated interfaces
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pdf:
                    type: object
                    properties:
                      url:
                        type: string
                      name:
                        type: string
                  xml:
                    type: object
                    properties:
                      url:
                        type: string
                      name:
                        type: string

  /v1/sap/{format}:
    get:
      tags: [ sap ]
      summary: Quarterly statistics on availability and performance of dedicated interfaces
      parameters:
        - in: path
          name: format
          required: true
          schema:
            type: string
            enum:
              - pdf
              - xml
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      type: string
                    name:
                      type: string

  /v1/card:
    get:
      summary: Get list of cards
      tags: [ card ]
      parameters:
        - in: query
          name: wallet_id
          schema:
            type: integer
        - in: query
          name: status[]
          schema:
            default: [ ]
            type: array
            items:
              type: string
              enum:
                - ORDERED
                - DISPATCHED
                - ACTIVE
                - BLOCKED
                - CLOSED
        - in: query
          name: type[]
          schema:
            default: [ ]
            type: array
            items:
              type: string
              enum:
                - ChipAndPin
                - Virtual
                - Disposable
          style: form
          explode: true
        - $ref: '#/components/parameters/PageNum'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          headers:
            x-pagination-current-page:
              $ref: '#/components/headers/x-pagination-current-page'
            x-pagination-page-count:
              $ref: '#/components/headers/x-pagination-page-count'
            x-pagination-per-page:
              $ref: '#/components/headers/x-pagination-per-page'
            x-pagination-total-count:
              $ref: '#/components/headers/x-pagination-total-count'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardIndex'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ card ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/card:
    post:
      summary: Card create
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CardCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreate'
      responses:
        200:
          description: OK
          headers:
            x-wallet-id:
              description: ID wallet
              schema:
                type: integer
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CardSuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ card ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, POST, OPTIONS

  /v1/card/{id}:
    get:
      summary: Get detailed information about card
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Card id for detalization
        - in: query
          name: expand
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - password
                - cvv
                - pin
                - number
                - limits
                - phone3ds
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardView'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ card ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v2/card/{id}:
    patch:
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      summary: Update card
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CardUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/CardUpdate'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/SuccessFormResponse'
                  - $ref: '#/components/responses/ErrorFormResponse'
                  - $ref: '#/components/responses/SignFormResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ card ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v2/card/{id}/calculate/limits:
    post:
      summary: Get card limits
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Card id (UUID string)
      responses:
        201:
          $ref: '#/components/responses/Created'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        429:
          $ref: '#/components/responses/TooManyRequests'

    options:
      tags: [ card ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Card id (UUID string)
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v2/card/{id}/limits:
    patch:
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      summary: Update card limits and operations flags (enabled/disabled)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Card id (UUID string)
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                purchase:
                  type: object
                  properties:
                    transaction:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 100
                    daily:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 200
                    monthly:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 300
                withdrawal:
                  type: object
                  properties:
                    switch:
                      type: object
                      properties:
                        value:
                          type: boolean
                          description: Whether withdrawals are enabled or not
                    transaction:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 100
                    daily:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 200
                    monthly:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 300
                internetPurchase:
                  type: object
                  properties:
                    switch:
                      type: object
                      properties:
                        value:
                          type: boolean
                          description: Whether internet purchases are enabled or not
                    transaction:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 100
                    daily:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 200
                    monthly:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 300
                contactlessPurchase:
                  type: object
                  properties:
                    switch:
                      type: object
                      properties:
                        value:
                          type: boolean
                          description: Whether contactless purchases are enabled or not
                    transaction:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 100
                    daily:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 200
                    monthly:
                      type: object
                      properties:
                        value:
                          type: integer
                          example: 300
      responses:
        200:
          $ref: '#/components/responses/Validate'
        204:
          $ref: '#/components/responses/Created'
        422:
          $ref: '#/components/responses/ValidationError'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        429:
          $ref: '#/components/responses/TooManyRequests'

    options:
      tags: [ card ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Card id (UUID string)
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: PATCH, OPTIONS

  /v1/card/{id}/limits:
    get:
      deprecated: true
      summary: Get card limits
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Card id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardLimitsV1'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    patch:
      deprecated: true
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      summary: Update card limits and operations flags (enabled/disabled)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                purchase:
                  type: object
                  properties:
                    value:
                      type: string
                      enum: [ DEFAULT, MAXIMUM ]
                      example: DEFAULT
                withdrawal:
                  type: object
                  properties:
                    value:
                      type: string
                      enum: [ DEFAULT, MAXIMUM ]
                      example: DEFAULT
                    switch:
                      type: object
                      properties:
                        value:
                          type: boolean
                          description: Whether withdrawals are enabled or not
                internet_purchase:
                  type: object
                  properties:
                    value:
                      type: string
                      enum: [ DEFAULT, MAXIMUM ]
                      example: DEFAULT
                    switch:
                      type: object
                      properties:
                        value:
                          type: boolean
                          description: Whether internet purchases are enabled or not
                contactless_purchase:
                  type: object
                  properties:
                    value:
                      type: string
                      enum: [ DEFAULT, MAXIMUM ]
                      example: DEFAULT
                    switch:
                      type: object
                      properties:
                        value:
                          type: boolean
                          description: Whether contactless purchases are enabled or not
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  errors:
                    type: object
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      deprecated: true
      tags: [ card ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, PATCH, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, PATCH, OPTIONS

  /v1/card/{id}/apple/wallet:
    post:
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      summary: Add card to Apple wallet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CardAddApple'
          application/json:
            schema:
              $ref: '#/components/schemas/CardAddApple'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  encryptedPassData:
                    type: string
                  activationData:
                    type: string
                  ephemeralPublicKey:
                    type: string
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ card ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/card/info:
    get:
      summary: Response delivery info
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  phone:
                    type: string
                    description: 3ds phone number will be use for card
                  delivery:
                    type: object
                    properties:
                      type:
                        type: array
                        description: Delivery type
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              enum:
                                - Standard
                                - Express
                            label:
                              type: string
                              example: "Standard"
                            time:
                              type: object
                              properties:
                                min:
                                  type: integer
                                max:
                                  type: integer
                            price:
                              type: string
                              example: "100.20"
                            currency_id:
                              type: string
                              example: "EUR"
                              maxLength: 3
                      country:
                        type: array
                        description: Countries available for delivery
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: "AT"
                            iso3:
                              type: string
                              example: "AUT"
                              maxLength: 3
                            label:
                              type: string
                              example: "Austria"
                  card:
                    type: object
                    properties:
                      type:
                        type: array
                        description: Card type
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: "ChipAndPin"
                              enum:
                                - ChipAndPin
                                - Virtual
                                - Disposable
                            label:
                              type: string
                              example: "Physical"
                            price:
                              type: number
                              example: 1.5
                            currency_id:
                              type: string
                              example: "EUR"
                            designId:
                              type: string
                              description: Design Id code
                              example: "ABV"
                              enum:
                                - ABC
                                - ABV
                                - ABD
                                - AIC
                                - AIV
                                - AID
                                - FBC
                                - FBV
                                - FBD
                                - FIC
                                - FIV
                                - FID
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ card ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/card/info/price:
    get:
      summary: Response delivery price info
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: card_type_id
          schema:
            type: string
            enum:
              - ChipAndPin
              - Virtual
              - Disposable
        - in: query
          name: delivery_type_id
          schema:
            type: string
            enum:
              - Standard
              - Express
        - in: query
          name: currency_id
          schema:
            type: string
            default: "EUR"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  delivery:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: string
                          example: "10"
                        currency_id:
                          type: string
                          example: "EUR"
                          maxLength: 3
                  card:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: string
                          example: "10"
                        currency_id:
                          type: string
                          example: "EUR"
                          maxLength: 3
                  total:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: string
                          example: "20"
                        currency_id:
                          type: string
                          example: "EUR"
                          maxLength: 3
                  status:
                    type: string
                    enum:
                      - SUCCESS
                      - ERROR
                  errors:
                    type: array
                    example: [ ]
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    options:
      tags: [ card ]
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: GET, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: GET, OPTIONS

  /v1/card/{id}/oob:
    post:
      summary: Set oob status for request
      tags: [ card ]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CardOob'
          application/json:
            schema:
              $ref: '#/components/schemas/CardOob'
      responses:
        204:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    options:
      tags: [ card ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          headers:
            Allow:
              schema:
                type: string
              description: POST, OPTIONS
            Access-Control-Allow-Methods:
              schema:
                type: string
              description: POST, OPTIONS

  /v1/code/{type}/send:
    post:
      tags: [ code ]
      summary: Отправить код подтверждения на email или телефон
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - email
              - phone
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipient:
                  type: string
                  example: "+441174960123"
                  description: Phone or email
              required:
                - recipient
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'

  /v1/code/{type}:
    post:
      tags: [ code ]
      summary: Проверить код подтверждения
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - email
              - phone
        - in: query
          name: validate
          schema:
            default: 0
            type: integer
            enum: [ 0, 1 ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipient:
                  type: string
                  example: "+441174960123"
                  description: Phone or email
                code:
                  type: string
                  example: "111111"
                  description: Verification code
                  maxLength: 6
              required:
                - recipient
                - code
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'

  /v1/ws/missed-messages:
    post:
      deprecated: true # API-5037
      tags: [ ws ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'

  /v2/tickets:
    post:
      tags: [ ticket ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
          multipart/form-data:
            schema:
              type: object
              properties:
                subject:
                  type: string
                description:
                  type: string
                email:
                  type: string
                status:
                  type: integer
                priority:
                  type: integer
                source:
                  type: integer
                attachments[]:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'

  /v1/webhook:
    get:
      tags: [ webhook ]
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    patch:
      tags: [ webhook ]
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: "https://website.com"
                enabled:
                  type: boolean
                  example: true
      responses:
        204:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'
        422:
          $ref: '#/components/responses/ValidationError'

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    AuthV2:
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
          description: UUID Unique id
        type:
          type: string
          readOnly: true
          example: MANUAL
          enum:
            - LOGIN
            - MANUAL
        allowIps:
          type: array
          uniqueItems: true
          maxItems: 3
          items:
            type: string
            default: 127.0.0.1
            description: Allow api access from IP addresses
        withMfa:
          default: true
          type: boolean
          description: Enable 2FA signature requests
        fingerprint:
          type: string
          default: null
          nullable: true
          description: Fingerprint unique ID
          maxLength: 64
        createdAt:
          type: integer
          readOnly: true
          example: 1722000000000
        updatedAt:
          type: integer
          readOnly: true
          example: 1722000000000
        expiredAt:
          type: integer
          default: null
          nullable: true
          description: UnixTime or Millisecond time of token expired
        app:
          type: string
          default: Chrome
          nullable: true
          description: Application name
        os:
          type: string
          nullable: true
          readOnly: true
          default: macOS
        osIcon:
          type: string
          nullable: true
          readOnly: true
          default: MACOS
          enum:
            - IOS
            - MACOS
            - ANDROID
            - LINUX
            - WINDOWS
        device:
          type: string
          nullable: true
          readOnly: true
          default: null
        location:
          type: object
          readOnly: true
          properties:
            ip:
              type: string
            country:
              type: string
              nullable: true
            city:
              type: string
              nullable: true

    AuthRefresh:
      type: object
      properties:
        token:
          type: string
          description: Refresh token
      required:
        - token

    AuthUpdatePassword:
      type: object
      properties:
        password:
          type: string
          description: Password
          example: 111111
          minLength: 8
          maxLength: 30
        password_repeat:
          type: string
          description: Password repeat
          example: 111111
          minLength: 8
          maxLength: 30
      required:
        - password
        - password_repeat

    AuthResetPassword:
      type: object
      properties:
        email:
          type: string
          description: Reset token will be sent to this email
          example: test@test.com
          maxLength: 255
      required:
        - email

    AuthChangePasswordV2:
      type: object
      properties:
        currentPassword:
          type: string
          description: Current password
          example: 111111
          minLength: 8
          maxLength: 30
        password:
          type: string
          description: New password
          example: 111111
          minLength: 8
          maxLength: 30
        passwordRepeat:
          type: string
          description: Password repeat
          example: 111111
          minLength: 8
          maxLength: 30
        signToken:
          type: string
          description: mfa token
      required:
        - currentPassword
        - password
        - passwordRepeat

    UserV1:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            profile:
              type: object
              properties:
                id:
                  type: string
                  example: 00000000-0000-0000-0000-000000000000
                email:
                  type: string
                  example: email@gmail.com
                  maxLength: 255
                phone:
                  type: string
                  example: "+3903459552936"
                  maxLength: 255
                company:
                  type: string
                  example: AltPay LTD
                  maxLength: 128
                username:
                  type: string
                  example: Dirk Gently
                  maxLength: 64
                chatId:
                  type: string
                  example: 11-22
                  maxLength: 256
                updatedAtMs:
                  type: integer
                  description: Updated timestamp in milliseconds
                  example: 1666666666999
            settings:
              type: object
              deprecated: true
              properties:
                mfa_enabled:
                  type: boolean
                  deprecated: true
                mfa_type:
                  type: string
                  deprecated: true
                  enum:
                    - sms
                    - google
            permissions:
              type: object
              example: {
                "canPaymentCreate": true,
                "canPaymentSign": true,
                "canPaymentDelete": true,
                "canPaymentCancel": true,
                "canPaymentDraftCreate": true,
                "canCurrencyExchangeCreate": true,
                "canCryptoPaymentCreate": true,
                "canBeneficiaryCreate": true,
                "canBeneficiaryDelete": true,
                "canUserEdit": true,
                "canWalletTopUp": false,
                "canUserDelete": false,
                "canCardCreate": true,
                "canCardView": true,
                "canCardPinView": true,
                "canCardPinEdit": true,
                "canCardPasswordView": true,
                "canCardPasswordEdit": true,
                "canCardCvvView": true,
                "canCardNumberView": true,
                "canCardActivate": true,
                "canCardBlock": true,
                "canCardUnblock": true,
                "canCardClose": true,
                "canCardPhoneView": true,
                "canCardPhoneEdit": true,
                "canCardSmsBalanceNotificationEdit": true,
                "canWalletEdit": true,
                "canWalletClose": true,
                "canTransferBetweenWallets": true
              }

    UserV2:
      type: object
      properties:
        data:
          type: object
          properties:
            profile:
              type: object
              properties:
                id:
                  type: string
                  example: 00000000-0000-0000-0000-000000000000
                email:
                  type: string
                  example: email@gmail.com
                  maxLength: 255
                phone:
                  type: string
                  example: "+3903459552936"
                  maxLength: 255
                username:
                  type: string
                  example: Dirk Gently
                  maxLength: 64
                chatId:
                  type: string
                  example: 11-22
                  maxLength: 256
                updatedAtMs:
                  type: integer
                  description: Updated timestamp in milliseconds
                  example: 1666666666999
            permissions:
              type: object
              example: {
                "canPaymentCreate": true,
                "canPaymentSign": true,
                "canPaymentDelete": true,
                "canPaymentCancel": true,
                "canPaymentDraftCreate": true,
                "canCurrencyExchangeCreate": true,
                "canCryptoPaymentCreate": true,
                "canBeneficiaryCreate": true,
                "canBeneficiaryDelete": true,
                "canUserEdit": true,
                "canWalletTopUp": false,
                "canUserDelete": false,
                "canCardCreate": true,
                "canCardView": true,
                "canCardPinView": true,
                "canCardPinEdit": true,
                "canCardPasswordView": true,
                "canCardPasswordEdit": true,
                "canCardCvvView": true,
                "canCardNumberView": true,
                "canCardActivate": true,
                "canCardBlock": true,
                "canCardUnblock": true,
                "canCardClose": true,
                "canCardPhoneView": true,
                "canCardPhoneEdit": true,
                "canCardSmsBalanceNotificationEdit": true,
                "canWalletEdit": true,
                "canWalletClose": true,
                "canTransferBetweenWallets": true
              }

    UserPatch:
      type: object
      properties:
        new_email:
          type: string
          description: New email
          maxLength: 255
        old_email_code:
          type: string
          description: Confirmation code for the current email
        new_email_code:
          type: string
          description: Confirmation code for the new email
        new_phone:
          type: string
          description: New phone number
          maxLength: 255
        old_phone_code:
          type: string
          description: Confirmation code for the current phone number
        new_phone_code:
          type: string
          description: Confirmation code for the new phone number

    UserRequestCode:
      type: object
      properties:
        new_email:
          type: string
          description: New email (required if email is selected)
          maxLength: 255
        new_phone:
          type: string
          description: New phone number (required if phone is selected)
          maxLength: 255

    Company:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: AltPay LTD
          maxLength: 128
        type:
          type: string
          enum: [ BUSINESS, INDIVIDUAL ]
        is_process_closing:
          type: boolean
          example: false
        permissions:
          type: object
          properties:
            canClose:
              type: boolean
        updatedAtMs:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999

    Beneficiary:
      type: object
      properties:
        id:
          type: integer
          description: Unique beneficiary id
        uuid:
          type: string
          description: Unique beneficiary id
        name:
          type: string
          description: Beneficiary name
          maxLength: 255
        bank_account_holder_name:
          type: string
          description: Bank account holder name
          maxLength: 255
        bank_country:
          type: string
          description: 2-char code of country
          maxLength: 2
        iban:
          type: string
          description: IBAN number
          maxLength: 255
        currency_id:
          type: string
          description: currency 3-char code
          maxLength: 3
        bic_swift:
          type: string
          description: BIC\SWIFT number
        bank_details_type:
          type: string
          enum:
            - DEFAULT
            - LOCAL
        beneficiary_entity_type:
          type: string
          description: Beneficiary type (individual or company)
        beneficiary_company_name:
          type: string
          description: Name of company
          maxLength: 35
        beneficiary_first_name:
          type: string
          description: Beneficiary first name
          maxLength: 64
        beneficiary_last_name:
          type: string
          description: Beneficiary last name
          maxLength: 64
        createdAtMs:
          type: integer
          description: Created timestamp in milliseconds
          example: 1666666666999
        updatedAtMs:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
        sortOrder:
          type: integer

    MerchantV1:
      type: object
      properties:
        id:
          type: integer
          description: Unique merchant id
        name:
          type: string
          description: Merchant name
        external_id:
          type: string
          description: External merchant id
        category_code:
          type: string
          description: Merchant category code
          maxLength: 4
        category_name:
          type: string
          description: Merchant category name
        address:
          type: string
          description: Merchant address

    MerchantV2:
      type: object
      properties:
        id:
          type: integer
          description: Unique merchant id
        name:
          type: string
          description: Merchant name
        externalId:
          type: string
          description: External merchant id
        categoryCode:
          type: string
          description: Merchant category code
          maxLength: 4
        categoryName:
          type: string
          description: Merchant category name
        groupId:
          type: string
          description: Merchant category group id
        groupName:
          type: string
          description: Merchant category group name
        address:
          type: string
          description: Merchant address
        url:
          type: string
          nullable: true
          example: https://ebay.com
          description: Merchant URL (Enriched data)
        domain:
          type: string
          nullable: true
          example: ebay.com
          description: Merchant domain (Enriched data)
        phone:
          type: string
          nullable: true
          example: 0800 358 6551
          description: Merchant phone number (Enriched data)
        iconUrl:
          type: string
          nullable: true
          example: https://ir.ebaystatic.com/pictures/aw/pics/announcements/new/logo/logo-inline.png
          description: Merchant icon url (Enriched data)

    Cardholder:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          description: Name and surname
        channel:
          type: string
          description: Replenishment channel
          enum:
            - VISA
            - MASTERCARD
            - APPLE_PAY
            - OTHER
        cardNumber:
          type: string
          description: PAN (permanent account number), which is usually 16-digits long

    PaymentFiles:
      type: array
      readOnly: true
      items:
        type: object
        properties:
          name:
            type: string
            example: 5fb3ea0c68147.png
            maxLength: 128
          type:
            type: string
            enum: [ invoice, agreement ]
          url:
            type: string
            example: https://altpay.uk/v1/payment/100/download/5fb3ea0c68147.pdf

    Country:
      type: object
      properties:
        id:
          type: integer
          description: ISO 2-char country code
          example: BE
          maxLength: 2
        label:
          type: string
          description: Readable country name
          maxLength: 255
        iso3:
          type: string
          description: ISO 3-char country code
          maxLength: 3

    WalletV3:
      type: object
      properties:
        id:
          type: integer
          description: Unique wallet id
        uuid:
          type: string
          description: Unique wallet id
        balance:
          type: number
          description: Balance of wallet
        balanceLock:
          type: number
          description: Balance lock of wallet
        balanceInProgress:
          type: number
          description: Balance in progress of wallet
        currencyId:
          type: string
          description: currency 3-char code
          maxLength: 255
        description:
          type: string
          description: Some information
          maxLength: 255
        flags:
          type: object
          properties:
            isVisible:
              type: boolean
            isFavourite:
              type: boolean
        permissions:
          type: object
          properties:
            canPay:
              type: boolean
            canTopUp:
              description: True if the wallet can be replenished by a card
              type: boolean
            canTopUpFromWallet:
              description: True if the wallet can be replenished from the company's other wallets
              type: boolean
            canCurrencyExchange:
              description: That's true, if it is possible to exchange currencies from this wallet.
              type: boolean
            canCardCreate:
              type: boolean
            canCardChipAndPinOrder:
              type: boolean
            canCardVirtualOrder:
              type: boolean
            canCardDisposableOrder:
              type: boolean
            canClose:
              type: boolean
            canExportPDF:
              type: boolean
            canExportCSV:
              type: boolean
            canExportXML:
              type: boolean
        data:
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  example: BANK
                accountId:
                  type: string
                  nullable: true
                  description: additional information
                details:
                  oneOf:
                    - type: array
                      readOnly: true
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Unique details id
                          isMain:
                            type: boolean
                            description: Is main wallet details
                          label:
                            type: string
                            description: Label
                          iban:
                            type: string
                            description: IBAN
                            nullable: true
                            maxLength: 255
                          bicSwift:
                            type: string
                            description: BIC/SWIFT
                            nullable: true
                          bank:
                            type: object
                            description: Bank
                            properties:
                              accountHolderName:
                                type: string
                                description: bank account holder name
                                maxLength: 255
                              name:
                                type: string
                                description: Bank name
                              address:
                                type: string
                    - type: array
                      readOnly: true
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Unique details id
                          isMain:
                            type: boolean
                            description: Is main wallet details
                          label:
                            type: string
                            description: Label
                          accountNumber:
                            type: string
                            description: account.no
                            nullable: true
                          sortCode:
                            type: string
                            description: sort code
                            nullable: true
                          bank:
                            type: object
                            description: Bank
                            properties:
                              accountHolderName:
                                type: string
                                description: bank account holder name
                                maxLength: 255
                              name:
                                type: string
                                description: Bank name
                              address:
                                type: string
            - type: object
              properties:
                type:
                  type: string
                  example: CARD
                count:
                  type: object
                  nullable: true
                  properties:
                    ordered:
                      type: integer
                    dispatched:
                      type: integer
                    active:
                      type: integer
                    blocked:
                      type: integer
                    closed:
                      type: integer
        status:
          type: string
          enum: [ ACTIVE, BLOCKED ]
          description: Wallet status
        color:
          type: string
          maxLength: 7
        name:
          type: string
          description: Wallet name
        transferSourceWalletId:
          description: List of wallets that can be used as source wallets (sending money to the current wallet)
          type: array
          readOnly: true
          items:
            type: integer
        transferTargetWalletId:
          description: List of wallets that can be used as target wallets (receiving money from the current wallet)
          type: array
          readOnly: true
          items:
            type: integer
        updatedAt:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999

    WalletV2:
      type: object
      properties:
        id:
          type: integer
          description: Unique wallet id
        uuid:
          type: string
          description: Unique wallet id
        balance:
          type: string
          description: Balance of wallet
        currencyId:
          type: string
          description: currency 3-char code
          maxLength: 3
        description:
          type: string
          description: Some information
          maxLength: 255
        permissions:
          type: object
          properties:
            canPay:
              type: boolean
            canTopUp:
              description: True if the wallet can be replenished by a card
              type: boolean
            canTopUpFromWallet:
              description: True if the wallet can be replenished from the company's other wallets
              type: boolean
            canCurrencyExchange:
              description: That's true, if it is possible to exchange currencies from this wallet.
              type: boolean
            canCardCreate:
              type: boolean
            canCardChipAndPinOrder:
              type: boolean
            canCardVirtualOrder:
              type: boolean
            canCardDisposableOrder:
              type: boolean
            canExportPDF:
              type: boolean
            canExportCSV:
              type: boolean
            canExportXML:
              type: boolean
        data:
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  example: BANK
                accountId:
                  type: string
                  nullable: true
                  description: additional information
                details:
                  oneOf:
                    - type: array
                      readOnly: true
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Unique details id
                          isMain:
                            type: boolean
                            description: Is main wallet details
                          label:
                            type: string
                            description: Label
                          iban:
                            type: string
                            description: IBAN
                            nullable: true
                            maxLength: 255
                          bicSwift:
                            type: string
                            description: BIC/SWIFT
                            nullable: true
                          bank:
                            type: object
                            description: Bank
                            properties:
                              accountHolderName:
                                type: string
                                description: bank account holder name
                                maxLength: 255
                              name:
                                type: string
                                description: Bank name
                              address:
                                type: string
                    - type: array
                      readOnly: true
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: Unique details id
                          isMain:
                            type: boolean
                            description: Is main wallet details
                          label:
                            type: string
                            description: Label
                          accountNumber:
                            type: string
                            description: account.no
                            nullable: true
                          sortCode:
                            type: string
                            description: sort code
                            nullable: true
                          bank:
                            type: object
                            description: Bank
                            properties:
                              accountHolderName:
                                type: string
                                description: bank account holder name
                                maxLength: 255
                              name:
                                type: string
                                description: Bank name
                              address:
                                type: string
            - type: object
              properties:
                type:
                  type: string
                  example: CARD
                count:
                  type: object
                  nullable: true
                  properties:
                    ordered:
                      type: integer
                    dispatched:
                      type: integer
                    active:
                      type: integer
                    blocked:
                      type: integer
                    closed:
                      type: integer
        isVisible:
          type: boolean
        status:
          type: string
          enum: [ ACTIVE, BLOCKED ]
          description: Wallet status
        color:
          type: string
          maxLength: 7
        name:
          type: string
          description: Wallet name
        transferSourceWalletId:
          description: List of wallets that can be used as source wallets (sending money to the current wallet)
          type: array
          readOnly: true
          items:
            type: integer
        transferTargetWalletId:
          description: List of wallets that can be used as target wallets (receiving money from the current wallet)
          type: array
          readOnly: true
          items:
            type: integer
        updatedAt:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999

    Login:
      deprecated: true
      type: object
      properties:
        fingerprintId:
          type: string
          description: Fingerprint unique ID
          maxLength: 64
        signToken:
          type: string
          description: Sign token

    WalletUpdateV2:
      type: object
      properties:
        description:
          type: string
          description: Description for wallet
          example: My First Wallet
          maxLength: 255
        color:
          type: string
          description: Color for wallet label
          example: '#FF453A'
          maxLength: 7
        isVisible:
          default: 1
          type: integer
          enum: [ 0, 1 ]
        isFavourite:
          default: 0
          type: integer
          enum: [ 0, 1 ]
          
    WalletUpdateV3:
      type: object
      properties:
        description:
          type: string
          description: Description for wallet
          example: My First Wallet
          maxLength: 255
        color:
          type: string
          description: Color for wallet label
          example: '#FF453A'
          maxLength: 7
        isVisible:
          default: 1
          type: integer
          enum: [ 0, 1 ]

    CreateWallet:
      type: object
      properties:
        description:
          type: string
          description: Description for wallet
          example: My First Wallet
          maxLength: 255
        color:
          type: string
          description: Color for wallet label
          example: '#FF453A'
          maxLength: 7
        isVisible:
          default: 1
          type: integer
          enum: [ 0, 1 ]

    WalletTopUpCard:
      type: object
      properties:
        id:
          type: string
          description: payment UUID (optional)
        amount:
          type: number
          description: top up amount
        successUrl:
          type: string
          description: URL for redirecting after successful payment
        cancelUrl:
          type: string
          description: URL for redirecting after cancelling payment
        expiryUrl:
          type: string
          description: URL for redirecting after timeout
      required:
        - amount

    WalletTopUpApple:
      type: object
      properties:
        id:
          type: string
          description: payment UUID (optional)
        amount:
          type: number
          description: top up amount
        successUrl:
          type: string
          description: URL for redirecting after successful payment
        cancelUrl:
          type: string
          description: URL for redirecting after cancelling payment
        expiryUrl:
          type: string
          description: URL for redirecting after timeout
      required:
        - amount

    TopUpWalletFee:
      type: object
      properties:
        amount:
          type: number
      required:
        - amount

    CreateBeneficiaryV2:
      type: object
      properties:
        uuid:
          type: string
          description: Uuid of beneficiary
        name:
          type: string
          description: Name of beneficiary
          example: Aliaksandr
          maxLength: 255
        currency_id:
          type: string
          description: Currency
          example: EUR
          maxLength: 3
        bank_country:
          type: string
          description: 2-char code of country
          example: LT
          maxLength: 2
        iban:
          type: string
          description: IBAN number
          example: NL13RABO4448094871
          maxLength: 255
        bic_swift:
          type: string
          description: BIC\SWIFT number
          example: AGBLLT2X
        account_number:
          type: number
        sort_code:
          type: number
        bank_details_type:
          type: string
          enum:
            - DEFAULT
            - LOCAL
        street:
          type: string
          description: Beneficiary address street
          example: Gagarina street
          maxLength: 64
        house:
          type: string
          description: Beneficiary house number
          example: 22
          maxLength: 32
        city:
          type: string
          description: Beneficiary city
          example: London
          maxLength: 64
        country_id:
          type: string
          description: Alpha-2 country code
          example: GB
        postal_code:
          type: string
          description: Beneficiary postal code
          example: 10001
          maxLength: 32
        entity_type:
          type: string
          description: Entity type
          enum:
            - individual
            - company
          example: company
        company_name:
          type: string
          description: AltPay Ltd.
          example: AltPay Ltd.
          maxLength: 35
        first_name:
          type: string
          description: Beneficiary first name
          example: Aliaksandr
          maxLength: 64
        last_name:
          type: string
          description: Beneficiary last name
          example: Lastname
          maxLength: 64

    CreateBeneficiaryV1:
      type: object
      properties:
        uuid:
          type: string
          description: Uuid of beneficiary
        name:
          type: string
          description: Name of beneficiary
          example: Aliaksandr
          maxLength: 255
        currency:
          type: string
          description: Currency
          example: EUR
          maxLength: 3
        bank_country:
          type: string
          description: 2-char code of country
          example: LT
          maxLength: 2
        iban:
          type: string
          description: IBAN number
          example: NL13RABO4448094871
          maxLength: 255
        bic_swift:
          type: string
          description: BIC\SWIFT number
          example: AGBLLT2X
        account_number:
          type: number
        sort_code:
          type: number
        bank_details_type:
          type: string
          enum:
            - DEFAULT
            - LOCAL
        street:
          type: string
          description: Beneficiary address street
          example: Gagarina street
          maxLength: 64
        house:
          type: string
          description: Beneficiary house number
          example: 22
          maxLength: 32
        city:
          type: string
          description: Beneficiary city
          example: London
          maxLength: 64
        country_id:
          type: string
          description: Alpha-2 country code
          example: GB
        postal_code:
          type: string
          description: Beneficiary postal code
          example: 10001
          maxLength: 32
        beneficiary_entity_type:
          type: string
          description: Entity type
          enum:
            - individual
            - company
          example: company
        beneficiary_company_name:
          type: string
          description: AltPay Ltd.
          example: AltPay Ltd.
          maxLength: 128
        beneficiary_first_name:
          type: string
          description: Beneficiary first name
          example: Aliaksandr
          maxLength: 64
        beneficiary_last_name:
          type: string
          description: Beneficiary last name
          example: Lastname
          maxLength: 64

    UpdateBeneficiaryV1:
      type: object
      properties:
        name:
          type: string
          description: Name of beneficiary
          example: Aliaksandr
          maxLength: 255

    BeneficiaryIbanInfoV2:
      type: object
      properties:
        iban:
          type: string
          description: IBAN number
          example: NL13RABO4448094871
        currencyId:
          type: string
          description: Currency
          example: EUR
        bankDetailsType:
          type: string
          enum:
            - DEFAULT
            - LOCAL
      required:
        - iban

    GoogleMfaEnable:
      type: object
      properties:
        code:
          type: string
          description: 6-digits number provided by google
          example: 111111
        password:
          type: string
          description: User current password
          example: 111111
        secretCode:
          type: string
          description: Secret code provided by google
        agree:
          default: 1
          type: integer
          enum: [ 0, 1 ]
          description: User agree terms
      required:
        - password
        - secretCode
        - agree

    GoogleMfaDisable:
      type: object
      properties:
        password:
          type: string
          description: User current password
        agree:
          default: 0
          type: integer
          enum: [ 0, 1 ]
          description: User agree terms
        signToken:
          type: string
      required:
        - password
        - agree

    PaymentV2:
      type: object
      properties:
        id:
          type: integer
          description: Unique id of payment
        uuid:
          type: string
          description: Unique id
        status:
          type: string
          description: Currency payment status
          enum:
            - new
            - process
            - completed
            - rejected
            - canceled
            - compliance
            - draft
        type:
          type: string
          description: Payment type
        fee:
          type: object
          description: Fee for payment
          properties:
            amount:
              type: number
            currencyId:
              type: string
        amount:
          type: number
          description: Payment amount
        total:
          type: number
          description: Payment fee + amount
        counterparty:
          type: object
          description: Counterparty Holder Name
          properties:
            name:
              type: string
              description: Name or description of counterparty
            accountHolderName:
              type: string
              description: BIC\SWIFT number of counterparty
            bic:
              type: string
              description: Counterparty Holder Name
            iban:
              type: string
              description: Counterparty iban
              maxLength: 255
        beneficiaryId:
          type: integer
          description: Beneficiary ID
        walletId:
          type: integer
          description: Wallet ID
        icon:
          type: string
          enum:
            - CONVERT
            - RETURN
            - CARD
            - ACCOUNT
            - CREDIT
            - DEBIT
        entity:
          type: string
          enum:
            - PAYMENT
            - CONVERT
            - CARD
        currencyId:
          type: string
          description: Payment currency 3-char code
          maxLength: 3
        currencyExchangeId:
          type: integer
        currencyExchangeUuid:
          type: string
          description: Unique currency exchange uuid
        reference:
          type: string
          description: Payment reference
        transactionAmount:
          type: number
        transactionCurrencyId:
          type: string
          maxLength: 3
        transactionExchangeRate:
          type: string
        cardMaskedNumber:
          type: string
        retrievalReferenceNumber:
          type: string
        permissions:
          type: object
          description: List of true\false permissions
          properties:
            canCancel:
              type: boolean
              description: User can canceled current payment
            canSign:
              type: boolean
              description: User can sing DRAFT payment
            canDelete:
              type: boolean
              description: User can delete DRAFT payment
            canDownloadConfirmation:
              type: boolean
              description: User can download confirmation file
        rejectReason:
          type: string
        purposeCode:
          $ref: '#/components/schemas/PurposeCode'
        currency:
          $ref: '#/components/schemas/Currency'
        currencyExchange:
          $ref: '#/components/schemas/CurrencyExchangeV2'
        merchant:
          $ref: '#/components/schemas/MerchantV2'
        cardholder:
          $ref: '#/components/schemas/Cardholder'
        files:
          $ref: '#/components/schemas/PaymentFiles'
        createdAt:
          type: integer
          description: Created timestamp in milliseconds
          example: 1666666666999
        updatedAt:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
        completedAt:
          type: integer
          description: Time of payment completion
          example: 1667404598

    PaymentV1:
      type: object
      properties:
        id:
          type: integer
          description: Unique id of payment
        status:
          type: string
          description: Currency payment status
          enum:
            - new
            - process
            - completed
            - rejected
            - canceled
            - failed
            - draft
        type:
          type: string
          description: Payment type
        fee:
          type: string
          description: Fee for payment
        amount:
          type: string
          description: Payment amount
        total:
          type: string
          description: Payment fee + amount
        counterparty_name:
          type: string
          description: Counterparty Holder Name
        counterparty:
          type: object
          properties:
            bic_swift:
              type: string
              description: BIC\SWIFT number of counterparty
            bank_account_holder_name:
              type: string
              description: Counterparty Holder Name
            iban:
              type: string
              description: Counterparty iban
              maxLength: 255
        beneficiary_id:
          type: integer
          description: Beneficiary ID
        wallet_id:
          type: integer
          description: Wallet ID
        purpose:
          type: object
          properties:
            label:
              type: string
              example: Main payment
        icon:
          type: string
          enum:
            - CONVERT
            - RETURN
            - CARD
            - ACCOUNT
            - CREDIT
            - DEBIT
        entity:
          type: string
          enum:
            - PAYMENT
            - CONVERT
            - CARD
        currency_id:
          type: string
          description: Payment currency 3-char code
          maxLength: 3
        currency_exchange_id:
          type: integer
        reference:
          type: string
          description: Payment reference
        transaction_amount:
          type: string
        transaction_currency_id:
          type: string
          maxLength: 3
        transaction_exchange_rate:
          type: string
        card_masked_number:
          type: string
        permissions:
          type: object
          description: List of true\false permissions
          properties:
            canCancel:
              type: boolean
              description: User can canceled current payment
            canSign:
              type: boolean
              description: User can sing DRAFT payment
            canDelete:
              type: boolean
              description: User can delete DRAFT payment
            canDownloadConfirmation:
              type: boolean
              description: User can download confirmation file
        reject_reason:
          type: string
        currency:
          $ref: '#/components/schemas/Currency'
        currencyExchange:
          $ref: '#/components/schemas/CurrencyExchangeV1'
        merchant:
          $ref: '#/components/schemas/MerchantV1'
        cardholder:
          $ref: '#/components/schemas/Cardholder'
        files:
          $ref: '#/components/schemas/PaymentFiles'
        createdAtMs:
          type: integer
          description: Created timestamp in milliseconds
          example: 1666666666999
        updatedAtMs:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
        completed_at:
          type: integer
          description: Time of payment completion
          example: 1667404598

    PurposeCode:
      type: object
      properties:
        code:
          type: string
        purpose:
          type: string

    Currency:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          maxLength: 3

    CryptoPaymentCreate:
      type: object
      properties:
        walletId:
          type: integer
          description: Wallet id
        amount:
          type: number
        cryptoNetwork:
          type: string
          enum: [ TRC20, ERC20 ]
        cryptoAddress:
          type: string
      required:
        - walletId
        - amount
        - cryptoNetwork
        - cryptoAddress

    CryptoPaymentCreateV2:
      type: object
      properties:
        fiatWalletId:
          type: integer
          description: Wallet id
        fiatAmount:
          type: number
        cryptoCurrencyId:
          type: string
          enum: [ USDT ]
        cryptoNetwork:
          type: string
          enum: [ TRC20, ERC20 ]
        cryptoAddress:
          type: string
      required:
        - fiatWalletId
        - fiatAmount
        - cryptoCurrencyId
        - cryptoNetwork
        - cryptoAddress

    CryptoPaymentCalculate:
      type: object
      properties:
        amount:
          type: number
        cryptoNetwork:
          type: string
          enum: [ TRC20, ERC20 ]
      required:
        - amount

    CryptoPaymentCalculateBuy:
      type: object
      properties:
        fiatAmount:
          type: number
        fiatCurrencyId:
          type: string
          enum: [ EUR ]
        cryptoCurrencyId:
          type: string
          enum: [ USDT ]
        cryptoNetwork:
          type: string
          enum: [ TRC20, ERC20 ]
      required:
        - fiatAmount

    CryptoPaymentCalculateSell:
      type: object
      properties:
        fiatCurrencyId:
          type: string
          enum: [ EUR ]
        cryptoAmount:
          type: number
        cryptoCurrencyId:
          type: string
          enum: [ USDT ]
        cryptoNetwork:
          type: string
          enum: [ TRC20, ERC20 ]
      required:
        - fiatCurrencyId
        - cryptoAmount
        - cryptoCurrencyId
        - cryptoNetwork

    CryptoAddressCreate:
      type: object
      properties:
        id:
          type: string
          description: Address uuid (we use in ws events and GET requests)
        walletId:
          type: string
          description: Wallet uuid
        currencyId:
          type: string
          enum: [ USDT ]
        network:
          type: string
          enum: [ TRC20, ERC20 ]
      required:
        - walletId
        - currencyId
        - network

    CryptoAddressRiskScore:
      type: object
      properties:
        currencyId:
          type: string
          enum: [ USDT ]
        network:
          type: string
          enum: [ TRC20, ERC20 ]
        address:
          type: string
      required:
        - currencyId
        - network
        - address

    CurrencyExchangeCreate:
      type: object
      properties:
        debitWalletId:
          type: integer
          description: Debit wallet id
        creditWalletId:
          type: integer
          description: Credit wallet id
        amount:
          type: number
          description: Sum
        signToken:
          type: string
      required:
        - debitWalletId
        - creditWalletId
        - amount

    NotificationV2:
      type: object
      properties:
        id:
          type: integer
          description: Unique notification message id
        type:
          type: string
          description: Notification type
          enum: [ DEFAULT, REQUIRED ]
        title:
          type: string
          description: Notification title
        text:
          type: string
          description: Notification text
        createdAt:
          type: integer
          description: Created timestamp in milliseconds
          example: 1666666666999
        updatedAt:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
        viewedAt:
          type: integer
          description: Viewed timestamp in milliseconds
          example: 1666666666999

    NotificationSettingsUpdate:
      type: object
      properties:
        login:
          type: boolean
          example: true
        loginWithNewDevice:
          type: boolean
          example: true
        cardActivated:
          type: boolean
          example: true
        cardBlocked:
          type: boolean
          example: true
        cardUnblocked:
          type: boolean
          example: true
        cardClosed:
          type: boolean
          example: true
        cardPinChanged:
          type: boolean
          example: true
        cardStaticPasswordChanged:
          type: boolean
          example: true
        paymentSigned:
          type: boolean
          example: true
        paymentRejected:
          type: boolean
          example: true
        paymentCompleted:
          type: boolean
          example: true
      required:
        - login
        - loginWithNewDevice
        - cardActivated
        - cardBlocked
        - cardUnblocked
        - cardClosed
        - cardPinChanged
        - cardStaticPasswordChanged
        - paymentSigned
        - paymentRejected
        - paymentCompleted

    MemberV1:
      deprecated: true
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        expired_at:
          type: integer
          description: Time of user expired
        is_active:
          type: boolean
        role:
          type: string

    MemberV2:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        expiredAt:
          type: integer
          description: Time of user expired
        isActive:
          type: boolean
        role:
          type: string
        walletAccess:
          type: array
          items:
            type: string

    MemberInviteV2:
      type: object
      properties:
        email:
          type: string
          example: test@test.com
          description: Member email
        phone:
          type: string
          example: "+33300000"
          description: Member phone
        name:
          type: string
          description: Member name
        role:
          type: string
          example: fullAccess
          description: Member role
          enum:
            - fullAccess
            - partialAccess
            - onlyView
        expiredAt:
          type: integer
          nullable: true
          description: UnixTime of user expired
        walletAccess[]:
          type: array
          description: Wallet UUIDs
          items:
            type: string
        signToken:
          type: string
          description: Sign token
      required:
        - email
        - phone
        - name
        - role

    MemberUpdateV2:
      type: object
      properties:
        name:
          type: string
          description: Member name
        expiredAt:
          type: integer
          nullable: true
          description: Time of user expired
        isActive:
          type: integer
          enum: [ 0, 1 ]
          description: Is member active
        role:
          type: string
          example: fullAccess
          description: Member role
          enum:
            - fullAccess
            - partialAccess
            - onlyView
        walletAccess:
          type: array
          description: Wallet UUIDs
          items:
            type: string
          example: [ ]
        signToken:
          type: string
          description: Sign token
      required:
        - name

    WishList:
      type: object
      properties:
        card:
          type: integer
          enum: [ 0, 1 ]
          description: Wish bank card
          example: 1
        investment_account:
          type: integer
          enum: [ 0, 1 ]
          description: Wish investment account
          example: 1

    CurrencyExchangeV3:
      type: object
      properties:
        id:
          type: string
          example: 38cabf72-9b93-4e88-9cc3-2ea95ebc4c11
        status:
          type: string
          enum:
            - NEW
            - PROCESS
            - COMPLETED
            - REJECTED
        debit:
          type: object
          properties:
            amount:
              type: number
            currencyId:
              type: string
              example: EUR
            walletId:
              type: string
              example: 38cabf72-9b93-4e88-9cc3-2ea95ebc4c1f
        credit:
          type: object
          properties:
            amount:
              type: number
              nullable: true
            currencyId:
              type: string
              example: USD
            walletId:
              type: string
              example: 38cabf72-9b93-4e88-9cc3-2ea95ebc4cbo
        fee:
          type: object
          nullable: true
          properties:
            amount:
              type: number
              example: 1.2
            currencyId:
              type: string
              example: EUR
            walletId:
              type: string
              example: 38cabf72-9b93-4e88-9cc3-2ea95ebc4c1f
        rate:
          type: number
          nullable: true
          example: 0.91
        createdAt:
          type: integer
          description: Created timestamp in milliseconds
          example: 1666666666999
        updatedAt:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
        completedAt:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
          nullable: true

    CurrencyExchangeV2:
      type: object
      properties:
        id:
          type: integer
        uuid:
          type: string
          description: Unique currency exchange uuid
        status:
          type: string
          enum:
            - NEW
            - PROCESS
            - COMPLETED
            - REJECTED
        debitCurrencyId:
          type: string
          example: EUR
        creditCurrencyId:
          type: string
          example: USD
        debitAmount:
          type: number
        creditAmount:
          type: number
        fee:
          type: number
        total:
          type: number
        rate:
          type: number
        createdAtMs:
          type: integer
          description: Created timestamp in milliseconds
          example: 1666666666999
        updatedAtMs:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
        completedAt:
          type: integer
          example: 1667404598

    CurrencyExchangeV1:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
          enum:
            - NEW
            - PROCESS
            - COMPLETED
            - REJECTED
        debitCurrencyId:
          type: string
        creditCurrencyId:
          type: string
        debitAmount:
          type: string
        creditAmount:
          type: string
        fee:
          type: string
        total:
          type: string
        rate:
          type: string
        createdAtMs:
          type: integer
          description: Created timestamp in milliseconds
          example: 1666666666999
        updatedAtMs:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
        completedAt:
          type: integer
          example: 1667404598

    RegistrationUser:
      type: object
      properties:
        email:
          type: string
          example: "string@mail.ru"
        email_code:
          type: string
          example: 111111
          writeOnly: true
        phone:
          type: string
          example: "+48511155588"
        password:
          type: string
          example: 111111aQ!
          writeOnly: true
        password_confirm:
          type: string
          example: 111111aQ!
          writeOnly: true
      required:
        - email
        - email_code
        - phone
        - password
        - password_confirm

    RegistrationUserWithRef:
      type: object
      properties:
        email:
          type: string
          example: "string@mail.ru"
        email_code:
          type: string
          example: 111111
          writeOnly: true
        phone:
          type: string
          example: "+48511155588"
        password:
          type: string
          example: 111111aQ!
          writeOnly: true
        password_confirm:
          type: string
          example: 111111aQ!
          writeOnly: true
        ref:
          description: Agent referral code
          type: string
      required:
        - email
        - email_code
        - phone
        - password
        - password_confirm

    RegistrationCompanyIndividual:
      type: object
      properties:
        first_name:
          type: string
          example: Dirk
        last_name:
          type: string
          example: Gently
        middle_name:
          type: string
          example:
        country_id:
          type: string
          example: IT
          description: Alpha-2 country code
        city:
          type: string
          example: Palermo
        postal_code:
          type: string
          example: 90143
        street:
          type: string
          example: Via della Libertà
        house:
          type: string
          example: 42
        apartment:
          type: string
          example: 42
        is_us:
          type: boolean
          default: false
        is_pep:
          type: boolean
          default: false
        address_confirmation_files:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: UTILITY_BILL
                enum:
                  - UTILITY_BILL
                  - BANK_STATEMENT
                  - OTHER
              name:
                type: string
                example: 5fb3ea0c68147.png
              original_name:
                type: string
                example: image_0934.png
              url:
                type: string
                example: https://altpay.uk/registration/3b29b35d3a1a5/5fb3b21ae664d.jpeg
                readOnly: true
        residence_permit_files:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: RESIDENCE_PERMIT
                enum:
                  - VISA
                  - RESIDENCE_PERMIT
              name:
                type: string
                example: 5fb3ea0c68147.png
              original_name:
                type: string
                example: image_0934.png
              url:
                type: string
                example: https://altpay.uk/registration/3b29b35d3a1a5/5fb3b21ae664d.jpeg
                readOnly: true
        id_document_files:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: ID card
                enum:
                  - ID card
                  - Passport
              name:
                type: string
                example: 5fb3ea0c68147.png
              original_name:
                type: string
                example: image_0934.png
              url:
                type: string
                example: https://altpay.uk/registration/3b29b35d3a1a5/5fb3b21ae664d.jpeg
                readOnly: true
      required:
        - first_name
        - last_name
        - citizenship_country_id
        - country_id
        - city
        - postal_code
        - street
        - house
        - is_us
        - is_pep
        - address_confirmation_files

    RegistrationCompanyBusiness:
      type: object
      properties:
        name:
          type: string
          example: ALTPAY LTD
        number:
          type: string
          example: 11347482
        registered_at:
          type: string
          example: 01.01.1990
        website:
          type: string
          example: https://altpay.uk
        files:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: Certificate of registration
                enum:
                  - Certificate of registration
                  - Resolution for appointment of director
                  - Power of Attorney
                  - List of shareholders
                  - Declaration of trust
              name:
                type: string
                example: 5fb3ea0c68147.png
              original_name:
                type: string
                example: image_0934.png
              url:
                type: string
                example: https://altpay.uk/registration/3b29b35d3a1a5/5fb3b21ae664d.jpeg
                readOnly: true
      required:
        - name
        - number
        - registered_at
        - website
        - files

    RegistrationKyc:
      type: object
      properties:
        monthly_turnover:
          type: string
          description: id from kycMonthlyTurnover in to the /registration/list
          example: 1
        payments_count:
          type: string
          description: id from kycPaymentsCount in to the /registration/list
          example: 1
        max_single_payment:
          type: integer
          example: 1
        founds_sources:
          type: array
          description: id from kycFoundSources in to the /registration/list
          items:
            type: string
          example: [ 1 ]
        founds_sources_input:
          type: string
          description: require if founds_sources include OTHER
        business_description:
          type: string
          example: description
        sic_codes:
          type: array
          description: array of SIC codes (see /registration/list/sic-code method)
          items:
            type: string
          example: [ "02200", "OTHER" ]
        sic_input:
          type: string
          description: required if sic_codes contains "OTHER"
        has_financial_statement:
          type: boolean
          description: Has financial statement (true - use files, false - use text reason)
        financial_statement_reason:
          type: string
          description: require if has_financial_statement is false
        financial_statement_files:
          description: require if has_financial_statement is true
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: 5fb3ea0c68333.png
              original_name:
                type: string
                example: image_3333.png
              url:
                type: string
                example: https://altpay.uk/registration/3b29b35d3a222/5fb3ea0c68333.png
                readOnly: true
      required:
        - monthly_turnover
        - payments_count
        - max_single_payment
        - founds_sources
        - business_description
        - sic_codes
        - has_financial_statement

    RegistrationAddress:
      type: object
      properties:
        id:
          type: string
          example: 5fb3ea0c68147
          readOnly: true
        type:
          type: string
          enum:
            - LEGAL
            - OPERATING
        city:
          type: string
          example: Riga
        apartment:
          type: string
          example: 20
        house:
          type: string
          example: 7
        street:
          type: string
          example: Zirgi
        country_id:
          type: string
          example: LV
          description: iso2 code from country list
        postal_code:
          type: string
          example: LV-1004
      required:
        - type
        - city
        - house
        - street
        - country_id
        - postal_code

    RegistrationMember:
      type: object
      properties:
        id:
          type: string
          example: 5fb3ea0c68150
          readOnly: true
        type:
          type: string
          example: DIRECTOR
          enum:
            - DIRECTOR
            - UBO
        gender:
          type: string
          example: MALE
          enum:
            - MALE
            - FEMALE
        percent:
          type: integer
          default: null
          nullable: true
          description: required for type=UBO
          minimum: 25
          maximum: 100
        birthday:
          type: string
          example: 01.01.2020
        first_name:
          type: string
          example: Aliaksandr
        last_name:
          type: string
          example: Markov
        middle_name:
          type: string
        citizenship_country_id:
          type: string
          example: CU
          description: Citizenship country code (ISO alpha-2)
        country_id:
          type: string
          example: LV
          description: Residence country code (ISO alpha-2)
        postal_code:
          type: string
          example: LV-1004
        city:
          type: string
          example: Riga
        street:
          type: string
          example: street
        house:
          type: string
          example: 10
        apartment:
          type: string
          example: 12
        email:
          type: string
          example: mark001@gmail.com
        phone:
          type: string
          example: "+48511155588"
        is_us:
          type: boolean
          default: false
        is_pep:
          type: boolean
          default: false
        files:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: ID card
                enum:
                  - ID card
                  - Passport
                  - Residence permit
              name:
                type: string
                example: 5fb3ea0c68147.png
              original_name:
                type: string
                example: image_0934.png
              url:
                type: string
                example: https://altpay.uk/registration/3b29b35d3a1a5/5fb3ea0c68147.png
                readOnly: true
        source_funds_files:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: Tax declaration
              name:
                type: string
                example: 5fb3ea0c68333.png
              original_name:
                type: string
                example: image_3333.png
              url:
                type: string
                example: https://altpay.uk/registration/3b29b35d3a222/5fb3ea0c68333.png
                readOnly: true
        address_confirmation_files:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: UTILITY_BILL
                enum:
                  - UTILITY_BILL
                  - BANK_STATEMENT
                  - OTHER
              name:
                type: string
                example: 5fb3ea0c68147.png
              original_name:
                type: string
                example: image_0934.png
              url:
                type: string
                example: https://altpay.uk/registration/3b29b35d3a1a5/5fb3ea0c68147.png
                readOnly: true
      required:
        - type
        - gender
        - first_name
        - last_name
        - birthday
        - street
        - house
        - flat
        - country_id
        - city
        - postal_code
        - email
        - phone
        - files
        - address_confirmation

    RegistrationCounterparty:
      type: object
      properties:
        id:
          type: string
          example: 5fb3ea0c68147
          readOnly: true
        name:
          type: string
          example: Siemens
        country_id:
          type: string
          example: LV
          description: Alpha-2 country code
        type:
          type: string
          example: INCOMING_PAYMENTS
          enum:
            - INCOMING_PAYMENTS
            - OUTGOING_PAYMENTS
        description:
          type: string
        files:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: OTHER
                enum:
                  - CONTRACT
                  - INVOICE
                  - OTHER
              name:
                type: string
                example: 5fb3ea0c68147.png
              original_name:
                type: string
                example: image_0934.png
              url:
                type: string
                example: https://altpay.uk/registration/3b29b35d3a1a5/5fb3b21ae664d.jpeg
                readOnly: true
      required:
        - name
        - country_id
        - type
        - files

    PaymentCreateV3:
      type: object
      properties:
        id:
          type: string
          description: Unique id
        status:
          type: string
          enum:
            - NEW
            - DRAFT
          default: NEW
        walletId:
          type: string
        amount:
          type: number
        beneficiaryId:
          type: string
          description: not required if **target_wallet_id** is set
          nullable: true
          default: null
        targetWalletId:
          type: string
          description: not use if **beneficiary_id** is set
          nullable: true
          default: null
        reference:
          type: string
          description: not required if **target_wallet_id** is set
        purposeCode:
          type: string
          description: required when beneficiary country is UAE
        files:
          type: array
          description: not required if **target_wallet_id** is set
          items:
            type: object
            properties:
              type:
                type: string
              name:
                type: string
      required:
        - walletId
        - amount

    PaymentCreateV2:
      type: object
      properties:
        uuid:
          type: string
          description: Unique id
        status:
          type: string
          enum:
            - new
            - draft
          default: new
        walletId:
          type: integer
        amount:
          type: number
        beneficiaryId:
          type: integer
          description: not required if **target_wallet_id** is set
          nullable: true
          default: null
        targetWalletId:
          type: integer
          description: not use if **beneficiary_id** is set
          nullable: true
          default: null
        reference:
          type: string
          description: not required if **target_wallet_id** is set
        files:
          type: array
          description: not required if **target_wallet_id** is set
          items:
            type: object
            properties:
              type:
                type: string
              name:
                type: string
        signToken:
          type: string
          description: Sign token
      required:
        - walletId
        - amount

    PaymentRequestCalculateFee:
      type: object
      properties:
        walletId:
          type: integer
        amount:
          type: number
        beneficiaryId:
          type: integer
          description: not required if **targetWalletId** is set
          nullable: true
          default: null
        targetWalletId:
          type: integer
          description: not use if **beneficiaryId** is set
          nullable: true
          default: null
      required:
        - walletId
        - amount

    PaymentRequestCalculateMaxAmount:
      type: object
      properties:
        walletId:
          type: integer
        beneficiaryId:
          type: integer
          description: not required if **targetWalletId** is set
          nullable: true
          default: null
        targetWalletId:
          type: integer
          description: not use if **beneficiaryId** is set
          nullable: true
          default: null
      required:
        - walletId

    CurrencyExchangeRequestCalculate:
      type: object
      properties:
        debitWalletId:
          type: integer
        creditWalletId:
          type: integer
        amount:
          type: number
      required:
        - debitWalletId
        - creditWalletId
        - amount

    CurrencyExchangeRequestCalculateMaxAmount:
      type: object
      properties:
        debitWalletId:
          type: integer
        creditWalletId:
          type: integer
      required:
        - debitWalletId
        - creditWalletId

    PaymentExpand:
      type: array
      items:
        type: string
        enum:
          - currency
          - currencyExchange
          - merchant
          - cardholder
          - files

    WalletExpandV2:
      type: array
      items:
        type: string
        enum:
          - currency
          - transferSourceWalletId
          - transferTargetWalletId

    WalletMakeFavorite:
      type: object
      properties:
        flag:
          type: integer
          enum: [ 0, 1 ]

    BeneficiaryExpand:
      type: array
      items:
        type: string
        enum:
          - currency
          - address
          - bankCountry

    CardIndex:
      type: object
      properties:
        id:
          type: integer
          description: Unique Card id
          readOnly: true
        uuid:
          type: string
          description: Unique Card id (UUID string)
          readOnly: true
        wallet_id:
          type: integer
          description: Wallet ID
          readOnly: true
        type:
          type: string
          readOnly: true
          enum:
            - ChipAndPin
            - Virtual
            - Disposable
        masked_number:
          type: string
          description: Masked Card Number
          example: 474359******5050
          readOnly: true
        status:
          type: string
          description: Card status
          enum:
            - ORDERED
            - DISPATCHED
            - ACTIVE
            - BLOCKED
            - CLOSED
        validUntilDate:
          type: string
          readOnly: true
        cardholder_name:
          type: string
          description: Cardholder name
        notification:
          type: object
          nullable: true
          properties:
            type:
              enum: [ ERROR, WARNING, INFO ]
              type: string
            title:
              type: string
            message:
              type: string
        orderInfo:
          type: object
          nullable: true
          properties:
            title:
              nullable: true
              type: string
            message:
              nullable: true
              type: string
            ordered_at:
              type: integer
            dispatched_at:
              nullable: true
              type: integer
            delivery:
              nullable: true
              type: object
        permissions:
          type: object
          description: List of true\false permissions
          readOnly: true
          properties:
            canActivate:
              type: boolean
              description: User can activate card
            canBlock:
              type: boolean
              description: User can block card
            canUnblock:
              type: boolean
              description: User can unblock card
            canGetPin:
              type: boolean
              description: User can get PIN
            canSetPin:
              type: boolean
              description: User can set PIN
            canGetCvv:
              type: boolean
              description: User can get CVV
            canGetPassword:
              type: boolean
              description: User can get password
            canSetPassword:
              type: boolean
              description: User can set password
            canGetNumber:
              type: boolean
              description: User can get number
            canClose:
              type: boolean
              description: User can close card
            canSetSmsBalanceNotification:
              type: boolean
              description: User can manage card payment balance sms notification
            canGetLimits:
              type: boolean
              description: User can get card limits
            canSetLimits:
              type: boolean
              description: User can update card limits
            canGetOperations:
              type: boolean
              description: User can get card operation flags
            canSetOperations:
              type: boolean
              description: User can update card operation flags
        updatedAtMs:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
        isSmsBalanceNotification:
          type: boolean
          description: Is Payment Balance Sms Notification Enabled
          example: false
        designId:
          type: string
          description: Design Id code
          example: AIV

    CardView:
      allOf:
        - $ref: '#/components/schemas/CardIndex'
        - type: object
          properties:
            password:
              type: string
              description: 3d secure password
              example: Aa123!qweqwe
            cvv:
              type: string
              description: Card CVV
              example: 1234
            pin:
              type: string
              description: Card PIN
              example: 1234
            number:
              type: string
              description: Card Number
              example: 4743591235635050
              readOnly: true
            phone3ds:
              type: string
              description: 3d secure phone
              example: "+48511155588"
              readOnly: true
            limits:
              $ref: '#/components/schemas/CardLimitsV1'

    CardCreate:
      type: object
      properties:
        walletDescription:
          type: string
          description: Description for wallet
          example: My First Wallet
        walletColor:
          type: string
          description: Color for wallet label
          example: '#FF453A'
        walletId:
          type: integer
          description: Card wallet ID
          example: 1
        feeWalletId:
          type: integer
          description: Wallet ID for debiting commission
          example: 1
        type:
          type: string
          description: Card type
          enum:
            - ChipAndPin
            - Virtual
            - Disposable
        firstName:
          type: string
          description: Name for delivery
          example: Aliaksandr
        lastName:
          type: string
          description: Name for delivery
          example: Lastname
        street:
          type: string
          description: Card delivery address street
          example: Gagarina street
        house:
          type: string
          description: Card delivery house number
          example: 22
        city:
          type: string
          description: Card delivery city
          example: London
        countryId:
          type: string
          description: Alpha-2 country code
          example: LV
        postalCode:
          type: string
          description: Card delivery postal code
          example: 10001
        phone:
          type: string
          description: Card delivery phone
          example: "+48511155588"
        password:
          type: string
          description: 3d-secure password
          example: "12345678AAaa!"
        phone3ds:
          type: string
          description: 3d secure phone
          example: "+48511155588"
        deliveryType:
          type: string
          description: Delivery type
          enum:
            - Standard
            - Express
        signToken:
          type: string
          description: mfa token
      required:
        - type
        - password
        - deliveryType

    CardUpdate:
      type: object
      properties:
        status:
          type: string
          description: activate, block, unblock or close card
          enum:
            - ACTIVE
            - BLOCKED
            - CLOSED
        password:
          type: string
          description: 3d-secure password
          example: "12345678AAaa!"
        pin:
          type: string
          description: PIN code
          example: "1765"
        phone3ds:
          type: string
          description: 3d secure phone
          example: "+48511155588"
        isSmsBalanceNotification:
          type: integer
          enum: [ 0, 1 ]
          description: Is Payment Balance SMS Notification Enabled
        signToken:
          type: string
          description: mfa token

    CardLimitsV1:
      type: object
      properties:
        updatedAtMs:
          type: integer
          description: Updated timestamp in milliseconds
          example: 1666666666999
        purchase:
          $ref: '#/components/schemas/CardLimitItemV1'
        withdrawal:
          $ref: '#/components/schemas/CardLimitItemV1'
        internet_purchase:
          $ref: '#/components/schemas/CardLimitItemV1'
        contactless_purchase:
          $ref: '#/components/schemas/CardLimitItemV1'

    CardLimitItemV1:
      type: object
      properties:
        value:
          type: string
          enum: [ DEFAULT, MAXIMUM ]
          example: DEFAULT
        switch:
          type: object
          properties:
            enabled:
              type: boolean
              description: Is the operation enabled/disabled switch is available
            value:
              type: boolean
              description: Used if enabled
        usage:
          type: object
          properties:
            currency_id:
              type: string
              example: EUR
              maxLength: 3
            transaction:
              type: number
            daily:
              type: object
              description: Daily limit usage
              properties:
                total:
                  type: number
                used:
                  type: number
                available:
                  type: number
                reset:
                  description: Reset timestamp
                  type: integer
            monthly:
              type: object
              description: Monthly limit usage
              properties:
                total:
                  type: number
                used:
                  type: number
                available:
                  type: number
                reset:
                  description: Reset timestamp
                  type: integer

    CardAddApple:
      type: object
      properties:
        certificateLeaf:
          type: string
        certificateSubCA:
          type: string
        nonceString:
          type: string
        nonceSignature:
          type: string
      required:
        - certificateLeaf
        - certificateSubCA
        - nonceString
        - nonceSignature

    CardOob:
      type: object
      properties:
        requestId:
          type: string
        status:
          type: string
          enum:
            - Success
            - Rejected
        type:
          type: string
          enum:
            - 3ds
      required:
        - requestId
        - status
        - type

    CryptoPaymentCalculateResponse:
      type: object
      properties:
        status:
          type: string
          example: SUCCESS
        data:
          type: object
          properties:
            fee:
              type: object
              properties:
                currencyId:
                  type: string
                amount:
                  type: number
            rate:
              type: number
            crypto:
              type: object
              properties:
                currencyId:
                  type: string
                amountNetto:
                  type: number
                networkFee:
                  type: number

    CryptoPaymentCalculateBuyResponse:
      type: object
      properties:
        fee:
          type: object
          properties:
            currencyId:
              type: string
            amount:
              type: number
        rate:
          type: number
        crypto:
          type: object
          properties:
            currencyId:
              type: string
            amountNetto:
              type: number
            networkFee:
              type: number

    CryptoPaymentCalculateSellResponse:
      type: object
      properties:
        fiat:
          type: object
          properties:
            amount:
              type: number
            currencyId:
              type: string

    CryptoPaymentItemResponse:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
        fiat:
          type: object
          properties:
            amount:
              type: number
              example: 100
            currencyId:
              type: string
              example: EUR
        fee:
          type: object
          properties:
            amount:
              type: number
              example: 2.15
            currencyId:
              type: string
              example: EUR
        crypto:
          type: object
          properties:
            currencyId:
              type: string
              example: USDT
            amountNetto:
              type: number
              example: 96.874515
            networkFee:
              type: number
              example: 96.874515
        rate:
          type: number
        wallet:
          type: object
          properties:
            address:
              type: string
              example: TVZx36qZA1hwaCt6XhufMi2qapLhJEF89J
            network:
              type: string
              example: TRC20
        txId:
          type: string
          example: 6a9csq15a3wmn2173b1b6p9f541q8jp91oh5s7y8h0628gwo9e8wm129so6cn4q0
        createdAt:
          type: integer
        updatedAt:
          type: integer
        completedAt:
          type: integer

    CryptoPaymentWalletListResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 42

    CryptoPaymentNetworkListResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: "TRC20"
          label:
            type: string
            example: "TRC20"

    CryptoAddressResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: address uuid
          walletId:
            type: string
            description: wallet uuid
          currencyId:
            type: string
            example: "USDT"
          network:
            type: string
            example: "TRC20"
          address:
            type: string
            description: crypto address
            example: "TP...4jPKfeuer5"

    CardSuccessFormResponse:
      type: object
      properties:
        status:
          type: string
          example: SUCCESS
        data:
          type: object
          properties:
            cardId:
              type: integer

    WalletReportResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique Report ID
        fileName:
          type: string
          maxLength: 128
        url:
          type: string
        description:
          type: string
          maxLength: 255
        createdAt:
          type: integer
        status:
          type: string
          enum: [ PROCESS , DONE ]
        data:
          type: object
          properties:
            type:
              type: string
            dateFrom:
              type: integer
            format:
              type: string
            dateTo:
              type: integer
            walletId:
              type: integer
            sendToEmail:
              type: boolean
            includeFeePayment:
              type: boolean

    WalletReportWalletId:
      type: object
      properties:
        format:
          type: string
          enum: [ XML, PDF, CSV ]
        dateFrom:
          description: Timestamp
          type: integer
        dateTo:
          description: Timestamp
          type: integer
        type:
          type: string
          enum: [ ANY, DEBIT, CREDIT ]
          default: ANY
        includeFeePayment:
          default: 1
          type: integer
          enum: [ 0, 1 ]
        sendToEmail:
          default: 0
          type: integer
          enum: [ 0, 1 ]
        description:
          description: "Description of report"
          type: string
          maxLength: 255
      required:
        - format

    WalletReport:
      type: object
      properties:
        walletId:
          type: integer
          description: Wallet id
        format:
          type: string
          enum: [ XML, PDF, CSV ]
        dateFrom:
          description: Timestamp
          type: integer
        dateTo:
          description: Timestamp
          type: integer
        type:
          type: string
          enum: [ ANY, DEBIT, CREDIT ]
          default: ANY
        includeFeePayment:
          default: 1
          type: integer
          enum: [ 0, 1 ]
        sendToEmail:
          default: 0
          type: integer
          enum: [ 0, 1 ]
        description:
          description: "Description of report"
          type: string
          maxLength: 255
      required:
        - walletId
        - format

    WebhookResponse:
      type: object
      properties:
        url:
          type: string
        enable:
          type: boolean
        publicRsa:
          type: object
          properties:
            kty:
              type: string
            a:
              type: string
            n:
              type: string

  parameters:
    PageNum:
      name: page
      in: query
      schema:
        type: integer

    PerPage:
      name: per-page
      in: query
      schema:
        type: integer

    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    After:
      name: after
      in: query
      schema:
        type: string

    Before:
      name: before
      in: query
      schema:
        type: string

    Sort:
      name: sort
      in: query
      description: |
        Enter a field name to sort by (with a minus to sort desc):  
        
            id: sort asc  
            -id: sort desc
      schema:
        type: string

  responses:
    MethodNotAllowed:
      description: Method not allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Method not allowed
              message:
                type: string
              status:
                type: integer
                example: 405
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Bad Request
              message:
                type: string
              status:
                type: integer
                example: 400

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Unauthorized
              message:
                type: string
                example: Your request was made with invalid credentials.
              status:
                type: integer
                example: 401

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Forbidden
              message:
                type: string
              status:
                type: integer
                example: 403

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Not Found
              message:
                type: string
              status:
                type: integer
                example: 404

    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Too Many Requests
              message:
                type: string
              status:
                type: integer
                example: 429

    Created:
      description: Created
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: CREATED
              id:
                type: string
                example: 00000000-0000-0000-0000-000000000000
                description: ID of the new entity

    SuccessFormResponse:
      type: object
      properties:
        status:
          type: string
          example: SUCCESS
        data:
          type: object

    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: ERROR
              errors:
                type: object
                example: {
                  email: "Email cannot be blank."
                }

    Validate:
      description: Validate data
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: VALIDATE
              errors:
                type: object
                example: {
                  email: "Email cannot be blank."
                }

    ErrorFormResponse:
      type: object
      properties:
        status:
          type: string
          example: ERROR
        errors:
          type: object
          example: {
            email: "Email cannot be blank."
          }

    Sign:
      description: Required request sign
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: SIGN
              requestId:
                type: string

    SignFormResponse:
      type: object
      properties:
        status:
          type: string
          example: SIGN
        signId:
          type: string

  headers:
    x-pagination-current-page:
      description: Current page
      schema:
        type: integer
        default: 1
    x-pagination-page-count:
      description: Pages count
      schema:
        type: integer
        example: 6
    x-pagination-per-page:
      description: Items count per page
      schema:
        type: integer
        default: 20
        example: 20
        maximum: 100
        minimum: 1
    x-pagination-total-count:
      description: Total items count
      schema:
        type: integer
        example: 113
